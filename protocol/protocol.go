// generated by pcg, DO NOT modify manually.

package protocol

import (
	"g_server/framework/protocolbase"
)

const (
	P_COM_GAME_WORLD_BEGIN                     = uint32(0)
	P_COM_GAME_WORLD_C2S_ReqSlotDataShuiHu     = uint32(1)
	P_COM_GAME_WORLD_S2C_ReqSlotDataShuiHu     = uint32(2)
	P_COM_GAME_WORLD_S2C_SynBigWinInfoShuiHu   = uint32(3)
	P_COM_GAME_WORLD_S2C_SynLitteGameError     = uint32(4)
	P_COM_GAME_WORLD_C2S_ShowLitteGame         = uint32(5)
	P_COM_GAME_WORLD_C2S_ReqShuihuRecord       = uint32(6)
	P_COM_GAME_WORLD_S2C_ReplyShuihuRecord     = uint32(7)
	P_COM_GAME_WORLD_C2S_ReqSlotFreeDataShuiHu = uint32(8)
	P_COM_GAME_WORLD_S2C_ReqSlotFreeDataShuiHu = uint32(9)
	P_COM_GAME_WORLD_S2C_FreeGameEndShuiHu     = uint32(10)
	P_COM_GAME_WORLD_S2C_LG_DZPK_CreateRoom    = uint32(11)
	P_COM_GAME_WORLD_C2S_LG_DZPK_CreateRoom    = uint32(12)
	P_COM_GAME_WORLD_S2C_LG_DZPK_JoinRoom      = uint32(13)
	P_COM_GAME_WORLD_C2S_LG_DZPK_JoinRoom      = uint32(14)
	P_COM_GAME_WORLD_S2C_LG_DZPK_Ready         = uint32(15)
	P_COM_GAME_WORLD_C2S_LG_DZPK_Ready         = uint32(16)
	P_COM_GAME_WORLD_S2C_LG_DZPK_StartGame     = uint32(17)
	P_COM_GAME_WORLD_C2S_LG_DZPK_ExitRoom      = uint32(18)
	P_COM_GAME_WORLD_S2C_LG_DZPK_ExitRoom      = uint32(19)
	P_COM_GAME_WORLD_C2S_LG_DZPK_OP            = uint32(20)
	P_COM_GAME_WORLD_S2C_LG_DZPK_OP            = uint32(21)
	P_COM_GAME_WORLD_S2C_LG_DZPK_EndGame       = uint32(22)
	P_COM_GAME_WORLD_S2C_LG_DZPK_SendPoker     = uint32(23)
	P_COM_GAME_WORLD_S2C_LG_DZPK_RequestRoom   = uint32(24)
	P_COM_GAME_WORLD_C2S_LG_DZPK_RequestRoom   = uint32(25)
	P_COM_GAME_WORLD_S2C_LG_DZPK_KickRoom      = uint32(26)
	P_COM_GAME_WORLD_C2S_LG_Hcpy_Request       = uint32(27)
	P_COM_GAME_WORLD_S2C_LG_Hcpy_Request       = uint32(28)
	P_COM_GAME_WORLD_C2S_LG_Start_Request      = uint32(29)
	P_COM_GAME_WORLD_S2C_LG_LHD_Bet_All        = uint32(30)
	P_COM_GAME_WORLD_S2C_LG_LHD_State          = uint32(31)
	P_COM_GAME_WORLD_S2C_LG_LHD_Result         = uint32(32)
	P_COM_GAME_WORLD_C2S_LG_Req_AllHistory     = uint32(33)
	P_COM_GAME_WORLD_S2C_LG_Req_AllHistory     = uint32(34)
	P_COM_GAME_WORLD_C2S_LG_LHD_Exit           = uint32(35)
	P_COM_GAME_WORLD_C2S_LG_All_Bet            = uint32(36)
	P_COM_GAME_WORLD_S2C_LG_All_Bet            = uint32(37)
	P_COM_GAME_WORLD_C2S_LG_All_BetMore        = uint32(38)
	P_COM_GAME_WORLD_S2C_LG_All_BetMore        = uint32(39)
	P_COM_GAME_WORLD_S2C_LG_NN_Result          = uint32(40)
	P_COM_GAME_WORLD_S2C_LG_NN_State           = uint32(41)
	P_COM_GAME_WORLD_C2S_LG_Quit               = uint32(42)
	P_COM_GAME_WORLD_S2C_LG_NN_Zhuang          = uint32(43)
	P_COM_GAME_WORLD_C2S_LG_BeDealer           = uint32(44)
	P_COM_GAME_WORLD_S2C_LG_BeDealer           = uint32(45)
	P_COM_GAME_WORLD_C2S_LG_QuestDealer        = uint32(46)
	P_COM_GAME_WORLD_S2C_LG_QuestDealer        = uint32(47)
	P_COM_GAME_WORLD_S2C_LG_ChangeDealer       = uint32(48)
	P_COM_GAME_WORLD_C2S_LG_DownDealer         = uint32(49)
	P_COM_GAME_WORLD_C2S_LG_GetScoreGift       = uint32(50)
	P_COM_GAME_WORLD_S2C_LG_GetScoreGift       = uint32(51)
	P_COM_GAME_WORLD_S2C_LG_FruitCfg           = uint32(52)
	P_COM_GAME_WORLD_S2C_LG_FruitHistory       = uint32(53)
	P_COM_GAME_WORLD_S2C_LG_Fruit_State        = uint32(54)
	P_COM_GAME_WORLD_S2C_LG_Fruit_Result       = uint32(55)
	P_COM_GAME_WORLD_S2C_LG_Wxhh_State         = uint32(56)
	P_COM_GAME_WORLD_S2C_LG_Wxhh_Result        = uint32(57)
	P_COM_GAME_WORLD_S2C_LG_DoubleKill         = uint32(58)
	P_COM_GAME_WORLD_C2S_LG_BetLogInfo         = uint32(59)
	P_COM_GAME_WORLD_S2C_LG_BetLogInfo         = uint32(60)
	P_COM_GAME_WORLD_S2C_LG_SynCfg             = uint32(61)
	P_COM_GAME_WORLD_C2S_Ping                  = uint32(62)
	P_COM_GAME_WORLD_S2C_Ping                  = uint32(63)
	P_COM_GAME_WORLD_C2S_Login                 = uint32(64)
	P_COM_GAME_WORLD_S2C_Login                 = uint32(65)
	P_COM_GAME_WORLD_C2G_Login                 = uint32(66)
	P_COM_GAME_WORLD_G2C_Login                 = uint32(67)
	P_COM_GAME_WORLD_C2S_GmCmd                 = uint32(68)
	P_COM_GAME_WORLD_C2S_SystemNotice          = uint32(69)
	P_COM_GAME_WORLD_C2S_GiveNoticeGold        = uint32(70)
	P_COM_GAME_WORLD_S2C_SystemNotice          = uint32(71)
	P_COM_GAME_WORLD_S2C_MsgBox                = uint32(72)
	P_COM_GAME_WORLD_C2S_ClickUI               = uint32(73)
	P_COM_GAME_WORLD_S2C_HideButtonState       = uint32(74)
	P_COM_GAME_WORLD_S2C_SyncOwnerRoomList     = uint32(75)
	P_COM_GAME_WORLD_S2C_SyncOwnerInfo         = uint32(76)
	P_COM_GAME_WORLD_C2S_ReuestOwnerRoomList   = uint32(77)
	P_COM_GAME_WORLD_C2S_BindOwner             = uint32(78)
	P_COM_GAME_WORLD_C2S_GiveWarHead           = uint32(79)
	P_COM_GAME_WORLD_C2S_Sign                  = uint32(80)
	P_COM_GAME_WORLD_S2C_Sign                  = uint32(81)
	P_COM_GAME_WORLD_C2S_GiveRecord            = uint32(82)
	P_COM_GAME_WORLD_S2C_GiveRecord            = uint32(83)
	P_COM_GAME_WORLD_S2C_HaveDayAward          = uint32(84)
	P_COM_GAME_WORLD_C2S_GetDayAward           = uint32(85)
	P_COM_GAME_WORLD_C2S_BindWxAccount         = uint32(86)
	P_COM_GAME_WORLD_C2S_GetLvRedbag           = uint32(87)
	P_COM_GAME_WORLD_C2S_CdKey                 = uint32(88)
	P_COM_GAME_WORLD_C2S_QueryMailList         = uint32(89)
	P_COM_GAME_WORLD_S2C_SynMailList           = uint32(90)
	P_COM_GAME_WORLD_C2S_DeleteMail            = uint32(91)
	P_COM_GAME_WORLD_S2C_DeleteMail            = uint32(92)
	P_COM_GAME_WORLD_C2S_IosComment            = uint32(93)
	P_COM_GAME_WORLD_C2S_ChangeCannon          = uint32(94)
	P_COM_GAME_WORLD_C2S_ChangeSurface         = uint32(95)
	P_COM_GAME_WORLD_C2S_EnterRoom             = uint32(96)
	P_COM_GAME_WORLD_C2S_EnterRoomForward      = uint32(97)
	P_COM_GAME_WORLD_S2C_EnterRoomErr          = uint32(98)
	P_COM_GAME_WORLD_S2C_SyncItemModify        = uint32(99)
	P_COM_GAME_WORLD_C2S_UseItem               = uint32(100)
	P_COM_GAME_WORLD_S2C_UseItem               = uint32(101)
	P_COM_GAME_WORLD_C2S_BuyItem               = uint32(102)
	P_COM_GAME_WORLD_S2C_BuyItem               = uint32(103)
	P_COM_GAME_WORLD_S2C_SyncPlayerData        = uint32(104)
	P_COM_GAME_WORLD_S2C_InjectLockedAction    = uint32(105)
	P_COM_GAME_WORLD_C2S_InjectLockedAction    = uint32(106)
	P_COM_GAME_WORLD_S2C_LockFrameQuery        = uint32(107)
	P_COM_GAME_WORLD_C2S_LockFrameAnswer       = uint32(108)
	P_COM_GAME_WORLD_C2S_QuitRoom              = uint32(109)
	P_COM_GAME_WORLD_S2C_ChangeScene           = uint32(110)
	P_COM_GAME_WORLD_C2S_ChatMsg               = uint32(111)
	P_COM_GAME_WORLD_S2C_ChatMsg               = uint32(112)
	P_COM_GAME_WORLD_S2C_ChatErr               = uint32(113)
	P_COM_GAME_WORLD_C2S_VerityPhoneNum        = uint32(114)
	P_COM_GAME_WORLD_S2C_VerityPhoneNum        = uint32(115)
	P_COM_GAME_WORLD_C2S_BindPhoneNum          = uint32(116)
	P_COM_GAME_WORLD_S2C_SynPhoneNum           = uint32(117)
	P_COM_GAME_WORLD_C2S_SmApproveInfo         = uint32(118)
	P_COM_GAME_WORLD_S2C_SmApproveInfo         = uint32(119)
	P_COM_GAME_WORLD_C2S_ShootAction           = uint32(120)
	P_COM_GAME_WORLD_S2C_ShootAction           = uint32(121)
	P_COM_GAME_WORLD_S2C_SyncGenWaveState      = uint32(122)
	P_COM_GAME_WORLD_S2C_SyncFullData          = uint32(123)
	P_COM_GAME_WORLD_C2S_SyncInputAction       = uint32(124)
	P_COM_GAME_WORLD_S2C_RequireDebugData      = uint32(125)
	P_COM_GAME_WORLD_C2S_RequireDebugData      = uint32(126)
	P_COM_GAME_WORLD_S2C_LittleGamePreNotice   = uint32(127)
	P_COM_GAME_WORLD_C2S_UseSkill              = uint32(128)
	P_COM_GAME_WORLD_S2C_ShowGetItem           = uint32(129)
	P_COM_GAME_WORLD_S2C_SynPlayerValue        = uint32(130)
	P_COM_GAME_WORLD_S2C_RedPointFlag          = uint32(131)
	P_COM_GAME_WORLD_S2C_LG_SynZhuang          = uint32(132)
	P_COM_GAME_WORLD_S2C_LG_SynPlayerZhuang    = uint32(133)
	P_COM_GAME_WORLD_C2S_UploadWxName          = uint32(134)
	P_COM_GAME_WORLD_END                       = uint32(132)
	P_COM_GAME_WORLD_MAX                       = uint32(133)
)

var (
	ProtoNameMap_COM_GAME_WORLD = []string{
		"C2S_ReqSlotDataShuiHu",
		"S2C_ReqSlotDataShuiHu",
		"S2C_SynBigWinInfoShuiHu",
		"S2C_SynLitteGameError",
		"C2S_ShowLitteGame",
		"C2S_ReqShuihuRecord",
		"S2C_ReplyShuihuRecord",
		"C2S_ReqSlotFreeDataShuiHu",
		"S2C_ReqSlotFreeDataShuiHu",
		"S2C_FreeGameEndShuiHu",
		"S2C_LG_DZPK_CreateRoom",
		"C2S_LG_DZPK_CreateRoom",
		"S2C_LG_DZPK_JoinRoom",
		"C2S_LG_DZPK_JoinRoom",
		"S2C_LG_DZPK_Ready",
		"C2S_LG_DZPK_Ready",
		"S2C_LG_DZPK_StartGame",
		"C2S_LG_DZPK_ExitRoom",
		"S2C_LG_DZPK_ExitRoom",
		"C2S_LG_DZPK_OP",
		"S2C_LG_DZPK_OP",
		"S2C_LG_DZPK_EndGame",
		"S2C_LG_DZPK_SendPoker",
		"S2C_LG_DZPK_RequestRoom",
		"C2S_LG_DZPK_RequestRoom",
		"S2C_LG_DZPK_KickRoom",
		"C2S_LG_Hcpy_Request",
		"S2C_LG_Hcpy_Request",
		"C2S_LG_Start_Request",
		"S2C_LG_LHD_Bet_All",
		"S2C_LG_LHD_State",
		"S2C_LG_LHD_Result",
		"C2S_LG_Req_AllHistory",
		"S2C_LG_Req_AllHistory",
		"C2S_LG_LHD_Exit",
		"C2S_LG_All_Bet",
		"S2C_LG_All_Bet",
		"C2S_LG_All_BetMore",
		"S2C_LG_All_BetMore",
		"S2C_LG_NN_Result",
		"S2C_LG_NN_State",
		"C2S_LG_Quit",
		"S2C_LG_NN_Zhuang",
		"C2S_LG_BeDealer",
		"S2C_LG_BeDealer",
		"C2S_LG_QuestDealer",
		"S2C_LG_QuestDealer",
		"S2C_LG_ChangeDealer",
		"C2S_LG_DownDealer",
		"C2S_LG_GetScoreGift",
		"S2C_LG_GetScoreGift",
		"S2C_LG_FruitCfg",
		"S2C_LG_FruitHistory",
		"S2C_LG_Fruit_State",
		"S2C_LG_Fruit_Result",
		"S2C_LG_Wxhh_State",
		"S2C_LG_Wxhh_Result",
		"S2C_LG_DoubleKill",
		"C2S_LG_BetLogInfo",
		"S2C_LG_BetLogInfo",
		"S2C_LG_SynCfg",
		"C2S_Ping",
		"S2C_Ping",
		"C2S_Login",
		"S2C_Login",
		"C2G_Login",
		"G2C_Login",
		"C2S_GmCmd",
		"C2S_SystemNotice",
		"C2S_GiveNoticeGold",
		"S2C_SystemNotice",
		"S2C_MsgBox",
		"C2S_ClickUI",
		"S2C_HideButtonState",
		"S2C_SyncOwnerRoomList",
		"S2C_SyncOwnerInfo",
		"C2S_ReuestOwnerRoomList",
		"C2S_BindOwner",
		"C2S_GiveWarHead",
		"C2S_Sign",
		"S2C_Sign",
		"C2S_GiveRecord",
		"S2C_GiveRecord",
		"S2C_HaveDayAward",
		"C2S_GetDayAward",
		"C2S_BindWxAccount",
		"C2S_GetLvRedbag",
		"C2S_CdKey",
		"C2S_QueryMailList",
		"S2C_SynMailList",
		"C2S_DeleteMail",
		"S2C_DeleteMail",
		"C2S_IosComment",
		"C2S_ChangeCannon",
		"C2S_ChangeSurface",
		"C2S_EnterRoom",
		"C2S_EnterRoomForward",
		"S2C_EnterRoomErr",
		"S2C_SyncItemModify",
		"C2S_UseItem",
		"S2C_UseItem",
		"C2S_BuyItem",
		"S2C_BuyItem",
		"S2C_SyncPlayerData",
		"S2C_InjectLockedAction",
		"C2S_InjectLockedAction",
		"S2C_LockFrameQuery",
		"C2S_LockFrameAnswer",
		"C2S_QuitRoom",
		"S2C_ChangeScene",
		"C2S_ChatMsg",
		"S2C_ChatMsg",
		"S2C_ChatErr",
		"C2S_VerityPhoneNum",
		"S2C_VerityPhoneNum",
		"C2S_BindPhoneNum",
		"S2C_SynPhoneNum",
		"C2S_SmApproveInfo",
		"S2C_SmApproveInfo",
		"C2S_ShootAction",
		"S2C_ShootAction",
		"S2C_SyncGenWaveState",
		"S2C_SyncFullData",
		"C2S_SyncInputAction",
		"S2C_RequireDebugData",
		"C2S_RequireDebugData",
		"S2C_LittleGamePreNotice",
		"C2S_UseSkill",
		"S2C_ShowGetItem",
		"S2C_SynPlayerValue",
		"S2C_RedPointFlag",
		"S2C_LG_SynZhuang",
		"S2C_LG_SynPlayerZhuang",
		"C2S_UploadWxName",
	}

	ProtocolMD5 = []byte{0x1c, 0x8d, 0x71, 0x1f, 0xe6, 0x51, 0x97, 0x4e, 0x77, 0x4c, 0xb4, 0xb, 0x32, 0x69, 0x85, 0xab}
)

const (
	// enum LOGIN_RESULT
	P_LOGIN_RESULT_SUCCEED          = uint32(0)
	P_LOGIN_RESULT_MOMO_DISC        = uint32(1)
	P_LOGIN_RESULT_MOMO_CHECK_FAIL  = uint32(2)
	P_LOGIN_RESULT_ACC_DB_ERR       = uint32(3)
	P_LOGIN_RESULT_RSA_DEC_ERR      = uint32(4)
	P_LOGIN_RESULT_DBCPLAYER_DB_ERR = uint32(5)
	P_LOGIN_RESULT_DBID_NO_FIND     = uint32(6)
	P_LOGIN_RESULT_ACC_BAN          = uint32(7)
	P_LOGIN_RESULT_MSG_MD5_ERR      = uint32(8)
)

const (
	// enum DROP_ITEM_TYPE
	P_DROP_ITEM_TYPE_GODL      = uint32(0)
	P_DROP_ITEM_TYPE_ITEM      = uint32(1)
	P_DROP_ITEM_TYPE_FISH_COIN = uint32(2)
)

const (
	// enum ROOM_MODEL
	P_ROOM_MODEL_MULTI_MODEL_WARHEAD = uint32(4)
	P_ROOM_MODEL_MULTI_MODEL_SCORE   = uint32(5)
	P_ROOM_MODEL_MULTI_MODEL_FRUIT   = uint32(6)
	P_ROOM_MODEL_MULTI_MODEL_LHD     = uint32(7)
	P_ROOM_MODEL_MULTI_MODEL_WXHH    = uint32(8)
	P_ROOM_MODEL_MULTI_MODEL_SHUIHU  = uint32(9)
	P_ROOM_MODEL_MULTI_MODEL_NIUNIU  = uint32(10)
	P_ROOM_MODEL_MULTI_MODEL_Max     = uint32(11)
)
const (
	// enum ITEM_FLAG_BIT
	P_ITEM_FLAG_BIT_EQUIP = uint32(0)
)
const (
	// enum CHATMSGTYPE
	P_CHATMSGTYPE_SYSTEM_NOTICE_TYPE = uint32(0)
	P_CHATMSGTYPE_LABA_TYPE          = uint32(1)
	P_CHATMSGTYPE_WORLD_TYPE         = uint32(2)
	P_CHATMSGTYPE_ROOM_TYPE          = uint32(3)
	P_CHATMSGTYPE_P2P_TYPE           = uint32(4)
	P_CHATMSGTYPE_JSON_TYPE          = uint32(5)
	P_CHATMSGTYPE_MSG_BOARD          = uint32(6)
	P_CHATMSGTYPE_MAX_TYPE           = uint32(7)
)
const (
	// enum CHATERR_TYPE
	P_CHATERR_TYPE_CHAT_QUICK = uint32(1)
	P_CHATERR_TYPE_CHAT_FULL  = uint32(2)
)
const (
	// enum ShootAction
	P_ShootAction_RELEASE    = uint32(0)
	P_ShootAction_PRESS      = uint32(1)
	P_ShootAction_SHOOT      = uint32(2)
	P_ShootAction_LOCK_PRESS = uint32(3)
	P_ShootAction_LOCK_SHOOT = uint32(4)
)

const (
	// enum SEX_TYPE
	P_SEX_TYPE_MALE   = uint32(0)
	P_SEX_TYPE_FEMALE = uint32(1)
	P_SEX_TYPE_MAX    = uint32(2)
)
const (
	// enum PLAYER_VALUE_TYPE
	P_PLAYER_VALUE_TYPE_id                 = uint32(0)
	P_PLAYER_VALUE_TYPE_name               = uint32(1)
	P_PLAYER_VALUE_TYPE_ownerid            = uint32(2)
	P_PLAYER_VALUE_TYPE_lastNoticeId       = uint32(4)
	P_PLAYER_VALUE_TYPE_maskFlag           = uint32(5)
	P_PLAYER_VALUE_TYPE_lastLoginDay       = uint32(6)
	P_PLAYER_VALUE_TYPE_totalLoginDays     = uint32(7)
	P_PLAYER_VALUE_TYPE_inroomTime         = uint32(9)
	P_PLAYER_VALUE_TYPE_lastSaveTime       = uint32(10)
	P_PLAYER_VALUE_TYPE_score              = uint32(12)
	P_PLAYER_VALUE_TYPE_scoreResetTick     = uint32(13)
	P_PLAYER_VALUE_TYPE_scoreRate          = uint32(14)
	P_PLAYER_VALUE_TYPE_scoreFishingGet    = uint32(15)
	P_PLAYER_VALUE_TYPE_scoreFishingCost   = uint32(16)
	P_PLAYER_VALUE_TYPE_scoreFishingDayNum = uint32(17)
	P_PLAYER_VALUE_TYPE_scoreChangeDt      = uint32(18)
	P_PLAYER_VALUE_TYPE_dayOlTime          = uint32(19)
	P_PLAYER_VALUE_TYPE_lvredbag           = uint32(20)
	P_PLAYER_VALUE_TYPE_getAwardDay        = uint32(21)
	P_PLAYER_VALUE_TYPE_bindwx             = uint32(22)
	P_PLAYER_VALUE_TYPE_scoreCostT         = uint32(23)
)

const (
	// enum REDPOINT_TYPE
	P_REDPOINT_TYPE_REDPOINT_MAIL = uint32(0)
)

type P_LGBetData struct {
	P_betIdx  uint32
	P_betType uint32
	P_pid     uint64
}

func (self *P_LGBetData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_betIdx)
	packer.PackUInt32(self.P_betType)
	packer.PackUInt64(self.P_pid)
}

func (self *P_LGBetData) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_betIdx = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_betType = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_pid = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_LGDealerData struct {
	P_name  string
	P_state uint32
	P_pid   uint64
}

func (self *P_LGDealerData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackString(self.P_name)
	packer.PackUInt32(self.P_state)
	packer.PackUInt64(self.P_pid)
}

func (self *P_LGDealerData) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_name = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_state = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_pid = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_LGFruit struct {
	P_idx  uint32
	P_type uint32
	P_per  uint32
}

func (self *P_LGFruit) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_idx)
	packer.PackUInt32(self.P_type)
	packer.PackUInt32(self.P_per)
}

func (self *P_LGFruit) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_idx = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_type = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_per = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_SystemNotice struct {
	P_id      uint32
	P_title   string
	P_date    string
	P_content string
	P_item    *P_DropItem
	P_owner   uint64
}

func (self *P_SystemNotice) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_id)
	packer.PackString(self.P_title)
	packer.PackString(self.P_date)
	packer.PackString(self.P_content)
	self.P_item.Pack(packer, false)
	packer.PackUInt64(self.P_owner)
}

func (self *P_SystemNotice) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_title = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_date = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_content = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	self.P_item = &P_DropItem{}

	ret = self.P_item.Unpack(unpacker)
	if ret != 0 {
		return ret
	}

	ret, self.P_owner = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_DropItem struct {
	P_type      uint32
	P_itemid    uint32
	P_itemCount uint32
}

func (self *P_DropItem) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_type)
	packer.PackUInt32(self.P_itemid)
	packer.PackUInt32(self.P_itemCount)
}

func (self *P_DropItem) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_type = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_itemid = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_itemCount = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_RoomInfo struct {
	P_id           uint64
	P_model        uint32
	P_playernum    uint32
	P_maxplayernum uint32
	P_is3d         bool
	P_robot        bool
}

func (self *P_RoomInfo) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt64(self.P_id)
	packer.PackUInt32(self.P_model)
	packer.PackUInt32(self.P_playernum)
	packer.PackUInt32(self.P_maxplayernum)
	packer.PackBool(self.P_is3d)
	packer.PackBool(self.P_robot)
}

func (self *P_RoomInfo) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_model = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_playernum = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_maxplayernum = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_is3d = unpacker.UnPackBool()
	if ret != 0 {
		return ret
	}
	ret, self.P_robot = unpacker.UnPackBool()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_SOwnerPump struct {
	P_model   uint32
	P_version uint64
	P_pump    string
}

func (self *P_SOwnerPump) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_model)
	packer.PackUInt64(self.P_version)
	packer.PackString(self.P_pump)
}

func (self *P_SOwnerPump) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_model = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_version = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_pump = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_OwnerInfo struct {
	P_id       uint64
	P_gameroom uint32
}

func (self *P_OwnerInfo) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt64(self.P_id)
	packer.PackUInt32(self.P_gameroom)
}

func (self *P_OwnerInfo) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_gameroom = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_SMail struct {
	P_mailId   uint32
	P_datetime string
	P_txt      string
	P_fishcoin uint32
	P_replay   uint32
	P_fromid   uint64
	P_fromname string
	P_items    []*P_DropItem
}

func (self *P_SMail) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_mailId)
	packer.PackString(self.P_datetime)
	packer.PackString(self.P_txt)
	packer.PackUInt32(self.P_fishcoin)
	packer.PackUInt32(self.P_replay)
	packer.PackUInt64(self.P_fromid)
	packer.PackString(self.P_fromname)
	packer.PackUInt32(uint32(len(self.P_items)))
	for i := 1; i < len(self.P_items); i++ {
		self.P_items[i].Pack(packer, false)
	}
}

func (self *P_SMail) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_mailId = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_datetime = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_txt = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_fishcoin = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_replay = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_fromid = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_fromname = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_items = make([]*P_DropItem, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_DropItem{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_items = append(self.P_items, item)
		}
	}
	return ret
}

type P_SPoint struct {
	P_x int32
	P_y int32
}

func (self *P_SPoint) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackInt32(self.P_x)
	packer.PackInt32(self.P_y)
}

func (self *P_SPoint) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_x = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_y = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_SFish struct {
	P_id         uint32
	P_trackId    uint32
	P_offset_x   int32
	P_offset_y   int32
	P_rotation   int32
	P_seg        uint32
	P_interIdx   uint32
	P_x          int32
	P_y          int32
	P_nextX      int32
	P_nextY      int32
	P_dirX       int32
	P_dirY       int32
	P_speed      uint32
	P_stepDelay  uint32
	P_templateId uint32
	P_specType   uint32
}

func (self *P_SFish) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_id)
	packer.PackUInt32(self.P_trackId)
	packer.PackInt32(self.P_offset_x)
	packer.PackInt32(self.P_offset_y)
	packer.PackInt32(self.P_rotation)
	packer.PackUInt32(self.P_seg)
	packer.PackUInt32(self.P_interIdx)
	packer.PackInt32(self.P_x)
	packer.PackInt32(self.P_y)
	packer.PackInt32(self.P_nextX)
	packer.PackInt32(self.P_nextY)
	packer.PackInt32(self.P_dirX)
	packer.PackInt32(self.P_dirY)
	packer.PackUInt32(self.P_speed)
	packer.PackUInt32(self.P_stepDelay)
	packer.PackUInt32(self.P_templateId)
	packer.PackUInt32(self.P_specType)
}

func (self *P_SFish) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_trackId = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_offset_x = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_offset_y = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_rotation = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_seg = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_interIdx = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_x = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_y = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_nextX = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_nextY = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_dirX = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_dirY = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_speed = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_stepDelay = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_templateId = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_specType = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_GenData struct {
	P_idx   uint32
	P_id    uint32
	P_times uint32
	P_delay uint32
}

func (self *P_GenData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_idx)
	packer.PackUInt32(self.P_id)
	packer.PackUInt32(self.P_times)
	packer.PackUInt32(self.P_delay)
}

func (self *P_GenData) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_idx = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_id = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_times = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_delay = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_SFishAward struct {
	P_id   int32
	P_coin int32
	P_type uint32
}

func (self *P_SFishAward) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackInt32(self.P_id)
	packer.PackInt32(self.P_coin)
	packer.PackUInt32(self.P_type)
}

func (self *P_SFishAward) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_coin = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_type = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_SItemModify struct {
	P_id  uint32
	P_num int32
}

func (self *P_SItemModify) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_id)
	packer.PackInt32(self.P_num)
}

func (self *P_SItemModify) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_num = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_ChatData struct {
	P_type        uint32
	P_id          uint64
	P_toplayer    uint64
	P_account     string
	P_chatContent string
	P_name        string
}

func (self *P_ChatData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_type)
	packer.PackUInt64(self.P_id)
	packer.PackUInt64(self.P_toplayer)
	packer.PackString(self.P_account)
	packer.PackString(self.P_chatContent)
	packer.PackString(self.P_name)
}

func (self *P_ChatData) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_type = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_id = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_toplayer = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_account = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_chatContent = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_name = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_CachedConstData struct {
	P_c_extHitRate  uint32
	P_c_bulletSpeed uint32
}

func (self *P_CachedConstData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_c_extHitRate)
	packer.PackUInt32(self.P_c_bulletSpeed)
}

func (self *P_CachedConstData) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_c_extHitRate = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_c_bulletSpeed = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_CacheUpdateData struct {
	P_seedCatchFish      uint32
	P_dynamicPumpingRate int32
	P_maskFlag           uint32
}

func (self *P_CacheUpdateData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_seedCatchFish)
	packer.PackInt32(self.P_dynamicPumpingRate)
	packer.PackUInt32(self.P_maskFlag)
}

func (self *P_CacheUpdateData) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_seedCatchFish = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_dynamicPumpingRate = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_maskFlag = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_PlayerSeatData struct {
	P_seatId       int32
	P_gold         int32
	P_cannonId     int32
	P_randSeed     int32
	P_account      string
	P_cannonBackId int32
}

func (self *P_PlayerSeatData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackInt32(self.P_seatId)
	packer.PackInt32(self.P_gold)
	packer.PackInt32(self.P_cannonId)
	packer.PackInt32(self.P_randSeed)
	packer.PackString(self.P_account)
	packer.PackInt32(self.P_cannonBackId)
}

func (self *P_PlayerSeatData) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_seatId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_cannonId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_randSeed = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_account = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_cannonBackId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_SyncFullPlayerData struct {
	P_playerId int32
	P_inputs   []P_InputAction_Interface
	P_awards   []*P_SFishAward
	P_psd      []*P_PlayerSeatData
}

func (self *P_SyncFullPlayerData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackInt32(self.P_playerId)
	packer.PackUInt32(uint32(len(self.P_inputs)))
	for i := 1; i < len(self.P_inputs); i++ {
		packer.PackUInt32(self.P_inputs[i].F_InputAction())
		self.P_inputs[i].Pack(packer, false)
	}
	packer.PackUInt32(uint32(len(self.P_awards)))
	for i := 1; i < len(self.P_awards); i++ {
		self.P_awards[i].Pack(packer, false)
	}
	packer.PackUInt32(uint32(len(self.P_psd)))
	for i := 1; i < len(self.P_psd); i++ {
		self.P_psd[i].Pack(packer, false)
	}
}

func (self *P_SyncFullPlayerData) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_playerId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_inputs = make([]P_InputAction_Interface, 0, count)
		for i := 1; i < int(count); i++ {
			var item P_InputAction_Interface
			if ot, mret := unpacker.UnPackUInt32(); ot == 0 {
				if mret != P_InputAction_Maxtype {
					if mret == 0 {
						item = &P_IA_sync{}
					} else if mret == 1 {
						item = &P_IA_shoot{}
					} else if mret == 2 {
						item = &P_IA_skill{}
					} else if mret == 3 {
						item = &P_IA_changeCannon{}
					} else if mret == 4 {
						item = &P_IA_lockFish{}
					} else if mret == 50 {
						item = &P_IA_initWave{}
					} else if mret == 51 {
						item = &P_IA_changeSeat{}
					} else if mret == 52 {
						item = &P_IA_frozen{}
					} else if mret == 53 {
						item = &P_IA_insertGenFish{}
					} else if mret == 54 {
						item = &P_IA_clearScene{}
					} else if mret == 55 {
						item = &P_IA_fishSkill{}
					} else if mret == 56 {
						item = &P_IA_playerkillallfish{}
					} else if mret == 57 {
						item = &P_IA_subKilled{}
					} else if mret == 58 {
						item = &P_IA_crabCloseStatus{}
					} else if mret == 59 {
						item = &P_IA_crabDrop{}
					} else if mret == 60 {
						item = &P_IA_changeSurface{}
					} else {
						return -1
					}
				} else {
					return -1
				}
			}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_inputs = append(self.P_inputs, item)
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_awards = make([]*P_SFishAward, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_SFishAward{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_awards = append(self.P_awards, item)
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_psd = make([]*P_PlayerSeatData, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_PlayerSeatData{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_psd = append(self.P_psd, item)
		}
	}
	return ret
}

const (
	P_InputAction_IA_sync              = uint32(0)
	P_InputAction_IA_shoot             = uint32(1)
	P_InputAction_IA_skill             = uint32(2)
	P_InputAction_IA_changeCannon      = uint32(3)
	P_InputAction_IA_lockFish          = uint32(4)
	P_InputAction_IA_initWave          = uint32(50)
	P_InputAction_IA_changeSeat        = uint32(51)
	P_InputAction_IA_frozen            = uint32(52)
	P_InputAction_IA_insertGenFish     = uint32(53)
	P_InputAction_IA_clearScene        = uint32(54)
	P_InputAction_IA_fishSkill         = uint32(55)
	P_InputAction_IA_playerkillallfish = uint32(56)
	P_InputAction_IA_subKilled         = uint32(57)
	P_InputAction_IA_crabCloseStatus   = uint32(58)
	P_InputAction_IA_crabDrop          = uint32(59)
	P_InputAction_IA_changeSurface     = uint32(60)
	P_InputAction_Maxtype              = uint32(61)
)

type P_InputAction_Interface interface {
	F_InputAction() uint32
	Pack(protocolbase.IPacker, bool)
	Unpack(protocolbase.IUnpacker) int
}
type P_InputAction struct {
	P_frame int32
}

func (self *P_InputAction) F_InputAction() uint32 {
	return P_InputAction_Maxtype
}
func (self *P_InputAction) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackInt32(self.P_frame)
}

func (self *P_InputAction) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_frame = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_sync struct {
	base P_InputAction
}

func (self *P_IA_sync) F_InputAction() uint32 {
	return P_InputAction_IA_sync
}
func (self *P_IA_sync) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
}

func (self *P_IA_sync) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	return ret
}

type P_IA_shoot struct {
	base     P_InputAction
	P_target int32
}

func (self *P_IA_shoot) F_InputAction() uint32 {
	return P_InputAction_IA_shoot
}
func (self *P_IA_shoot) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_target)
}

func (self *P_IA_shoot) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_target = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_skill struct {
	base      P_InputAction
	P_skillId int32
	P_way     int32
}

func (self *P_IA_skill) F_InputAction() uint32 {
	return P_InputAction_IA_skill
}
func (self *P_IA_skill) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_skillId)
	packer.PackInt32(self.P_way)
}

func (self *P_IA_skill) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_skillId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_way = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_changeCannon struct {
	base       P_InputAction
	P_cannonId int32
}

func (self *P_IA_changeCannon) F_InputAction() uint32 {
	return P_InputAction_IA_changeCannon
}
func (self *P_IA_changeCannon) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_cannonId)
}

func (self *P_IA_changeCannon) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_cannonId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_changeSurface struct {
	base        P_InputAction
	P_surfaceId int32
	P_seatNum   int32
}

func (self *P_IA_changeSurface) F_InputAction() uint32 {
	return P_InputAction_IA_changeSurface
}
func (self *P_IA_changeSurface) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_surfaceId)
	packer.PackInt32(self.P_seatNum)
}

func (self *P_IA_changeSurface) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_surfaceId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_seatNum = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_changeSeat struct {
	base     P_InputAction
	P_seatId int32
	P_who    int32
}

func (self *P_IA_changeSeat) F_InputAction() uint32 {
	return P_InputAction_IA_changeSeat
}
func (self *P_IA_changeSeat) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_seatId)
	packer.PackInt32(self.P_who)
}

func (self *P_IA_changeSeat) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_seatId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_who = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_lockFish struct {
	base     P_InputAction
	P_fishId int32
	P_who    int32
}

func (self *P_IA_lockFish) F_InputAction() uint32 {
	return P_InputAction_IA_lockFish
}
func (self *P_IA_lockFish) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_fishId)
	packer.PackInt32(self.P_who)
}

func (self *P_IA_lockFish) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_fishId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_who = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_frozen struct {
	base     P_InputAction
	P_fishId int32
	P_who    int32
}

func (self *P_IA_frozen) F_InputAction() uint32 {
	return P_InputAction_IA_frozen
}
func (self *P_IA_frozen) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_fishId)
	packer.PackInt32(self.P_who)
}

func (self *P_IA_frozen) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_fishId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_who = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_insertGenFish struct {
	base    P_InputAction
	P_genId int32
}

func (self *P_IA_insertGenFish) F_InputAction() uint32 {
	return P_InputAction_IA_insertGenFish
}
func (self *P_IA_insertGenFish) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_genId)
}

func (self *P_IA_insertGenFish) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_genId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_clearScene struct {
	base         P_InputAction
	P_clearWave  int32
	P_frameLimit int32
}

func (self *P_IA_clearScene) F_InputAction() uint32 {
	return P_InputAction_IA_clearScene
}
func (self *P_IA_clearScene) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_clearWave)
	packer.PackInt32(self.P_frameLimit)
}

func (self *P_IA_clearScene) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_clearWave = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_frameLimit = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_fishSkill struct {
	base      P_InputAction
	P_fishId  int32
	P_skillId int32
	P_arg1    int32
	P_arg2    int32
}

func (self *P_IA_fishSkill) F_InputAction() uint32 {
	return P_InputAction_IA_fishSkill
}
func (self *P_IA_fishSkill) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_fishId)
	packer.PackInt32(self.P_skillId)
	packer.PackInt32(self.P_arg1)
	packer.PackInt32(self.P_arg2)
}

func (self *P_IA_fishSkill) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_fishId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_skillId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_arg1 = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_arg2 = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_initWave struct {
	base       P_InputAction
	P_levelId  int32
	P_waveId   int32
	P_fishId   int32
	P_randseed int32
}

func (self *P_IA_initWave) F_InputAction() uint32 {
	return P_InputAction_IA_initWave
}
func (self *P_IA_initWave) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_levelId)
	packer.PackInt32(self.P_waveId)
	packer.PackInt32(self.P_fishId)
	packer.PackInt32(self.P_randseed)
}

func (self *P_IA_initWave) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_levelId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_waveId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_fishId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_randseed = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_playerkillallfish struct {
	base P_InputAction
}

func (self *P_IA_playerkillallfish) F_InputAction() uint32 {
	return P_InputAction_IA_playerkillallfish
}
func (self *P_IA_playerkillallfish) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
}

func (self *P_IA_playerkillallfish) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	return ret
}

type P_IA_subKilled struct {
	base      P_InputAction
	P_fishId  int32
	P_seatNum int32
}

func (self *P_IA_subKilled) F_InputAction() uint32 {
	return P_InputAction_IA_subKilled
}
func (self *P_IA_subKilled) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_fishId)
	packer.PackInt32(self.P_seatNum)
}

func (self *P_IA_subKilled) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_fishId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_seatNum = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_crabCloseStatus struct {
	base     P_InputAction
	P_fishId int32
	P_close  int32
}

func (self *P_IA_crabCloseStatus) F_InputAction() uint32 {
	return P_InputAction_IA_crabCloseStatus
}
func (self *P_IA_crabCloseStatus) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_fishId)
	packer.PackInt32(self.P_close)
}

func (self *P_IA_crabCloseStatus) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_fishId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_close = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_IA_crabDrop struct {
	base      P_InputAction
	P_fishId  int32
	P_seatNum int32
}

func (self *P_IA_crabDrop) F_InputAction() uint32 {
	return P_InputAction_IA_crabDrop
}
func (self *P_IA_crabDrop) Pack(packer protocolbase.IPacker, clear bool) {
	self.base.Pack(packer, clear)
	packer.PackInt32(self.P_fishId)
	packer.PackInt32(self.P_seatNum)
}

func (self *P_IA_crabDrop) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0
	if ret := self.base.Unpack(unpacker); ret != 0 {
		return ret
	}

	ret, self.P_fishId = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_seatNum = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_SceneState struct {
	P_genWaveSeed     int32
	P_genWaveElapsed  int32
	P_extActionFlags  int32
	P_lastFrozenTicks int32
	P_sealedFishId    []int32
	P_lockFishId      []int32
}

func (self *P_SceneState) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackInt32(self.P_genWaveSeed)
	packer.PackInt32(self.P_genWaveElapsed)
	packer.PackInt32(self.P_extActionFlags)
	packer.PackInt32(self.P_lastFrozenTicks)
	packer.PackUInt32(uint32(len(self.P_sealedFishId)))
	for i := 1; i < len(self.P_sealedFishId); i++ {
		packer.PackInt32(self.P_sealedFishId[i])
	}
	packer.PackUInt32(uint32(len(self.P_lockFishId)))
	for i := 1; i < len(self.P_lockFishId); i++ {
		packer.PackInt32(self.P_lockFishId[i])
	}
}

func (self *P_SceneState) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_genWaveSeed = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_genWaveElapsed = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_extActionFlags = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_lastFrozenTicks = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_sealedFishId = make([]int32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_sealedFishId[i] = unpacker.UnPackInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_lockFishId = make([]int32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_lockFishId[i] = unpacker.UnPackInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	return ret
}

type P_SItem struct {
	P_id   uint32
	P_num  uint32
	P_flag int32
}

func (self *P_SItem) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_id)
	packer.PackUInt32(self.P_num)
	packer.PackInt32(self.P_flag)
}

func (self *P_SItem) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_num = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_flag = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_SItemBag struct {
	P_items []*P_SItem
}

func (self *P_SItemBag) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(uint32(len(self.P_items)))
	for i := 1; i < len(self.P_items); i++ {
		self.P_items[i].Pack(packer, false)
	}
}

func (self *P_SItemBag) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_items = make([]*P_SItem, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_SItem{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_items = append(self.P_items, item)
		}
	}
	return ret
}

type P_ShuiHuRecord struct {
	P_name string
	P_per  uint32
	P_gold uint32
	P_time string
}

func (self *P_ShuiHuRecord) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackString(self.P_name)
	packer.PackUInt32(self.P_per)
	packer.PackUInt32(self.P_gold)
	packer.PackString(self.P_time)
}

func (self *P_ShuiHuRecord) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_name = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_per = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_time = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_LHDRecord struct {
	P_rt     uint32
	P_rtds_l uint32
	P_rtds_h uint32
	P_rthh_l uint32
	P_rthh_h uint32
}

func (self *P_LHDRecord) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_rt)
	packer.PackUInt32(self.P_rtds_l)
	packer.PackUInt32(self.P_rtds_h)
	packer.PackUInt32(self.P_rthh_l)
	packer.PackUInt32(self.P_rthh_h)
}

func (self *P_LHDRecord) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_rt = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_rtds_l = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_rtds_h = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_rthh_l = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_rthh_h = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_DealRecord struct {
	P_playerid uint64
	P_num      uint32
	P_op       uint32
	P_time     string
}

func (self *P_DealRecord) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt64(self.P_playerid)
	packer.PackUInt32(self.P_num)
	packer.PackUInt32(self.P_op)
	packer.PackString(self.P_time)
}

func (self *P_DealRecord) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_playerid = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_num = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_op = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_time = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_SLittleGameRecord struct {
	P_shuihuRecordScore []*P_ShuiHuRecord
	P_dealList          []uint64
	P_dealRecord        []*P_DealRecord
}

func (self *P_SLittleGameRecord) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(uint32(3))
	packer.PackUInt32(uint32(len(self.P_shuihuRecordScore)))
	for i := 1; i < len(self.P_shuihuRecordScore); i++ {
		self.P_shuihuRecordScore[i].Pack(packer, false)
	}
	packer.PackUInt32(uint32(len(self.P_dealList)))
	for i := 1; i < len(self.P_dealList); i++ {
		packer.PackUInt64(self.P_dealList[i])
	}
	packer.PackUInt32(uint32(len(self.P_dealRecord)))
	for i := 1; i < len(self.P_dealRecord); i++ {
		self.P_dealRecord[i].Pack(packer, false)
	}
}

func (self *P_SLittleGameRecord) Unpack(unpacker protocolbase.IUnpacker) int {
	var (
		cret          int    = 0
		__rec_count__ uint32 = 0
		ret           int    = 0
	)
	cret, __rec_count__ = unpacker.UnPackUInt32()
	if cret != 0 {
		return cret
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		if ot, count := unpacker.UnPackUInt32(); ot == 0 {
			self.P_shuihuRecordScore = make([]*P_ShuiHuRecord, 0, count)
			for i := 1; i < int(count); i++ {
				var item = &P_ShuiHuRecord{}
				ret = item.Unpack(unpacker)
				if ret != 0 {
					return -1
				}
				self.P_shuihuRecordScore = append(self.P_shuihuRecordScore, item)
			}
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		if ot, count := unpacker.UnPackUInt32(); ot == 0 {
			self.P_dealList = make([]uint64, count)
			for i := 1; i < int(count); i++ {
				ret, self.P_dealList[i] = unpacker.UnPackUInt64()
				if ret != 0 {
					return ret
				}
			}
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		if ot, count := unpacker.UnPackUInt32(); ot == 0 {
			self.P_dealRecord = make([]*P_DealRecord, 0, count)
			for i := 1; i < int(count); i++ {
				var item = &P_DealRecord{}
				ret = item.Unpack(unpacker)
				if ret != 0 {
					return -1
				}
				self.P_dealRecord = append(self.P_dealRecord, item)
			}
		}
	}

	return ret
}

type P_SRecodLog struct {
	P_log_id                       uint64
	P_log_name                     string
	P_log_ownerid                  uint64
	P_log_platform                 uint64
	P_log_lastLoginDay             uint32
	P_log_totalLoginDays           uint32
	P_log_createDate               string
	P_log_inroomtime               uint32
	P_log_lastSaveTime             uint32
	P_log_device                   string
	P_log_score                    uint64
	P_log_scoreResetTick           uint32
	P_log_scoreRate                int64
	P_log_scoreFishingGet          uint64
	P_log_scoreFishingCost         uint64
	P_log_scoreFishingDayNum       int64
	P_log_scoreChangeDt            int64
	P_log_dayOlTime                uint64
	P_log_lgameFruitDelScore       uint64
	P_log_lgameFruitAddScore       uint64
	P_log_lgameFruitDailyCntScore  uint64
	P_log_lgameFruitDailyScore     int64
	P_log_lgameFruitCntScore       uint64
	P_log_sm_name                  string
	P_log_sm_phone                 string
	P_log_sm_idcard                string
	P_log_phonenum                 uint64
	P_log_createversion            string
	P_log_shootnum                 uint64
	P_log_klogindays               uint64
	P_log_maxklogindays            uint64
	P_log_klogindaysLoginTimes     uint64
	P_log_cmtversion               string
	P_log_xgtoken                  string
	P_log_scoreGetT                uint64
	P_log_scoreCostT               uint64
	P_log_lgameLhdDelScore         uint64
	P_log_lgameLhdAddScore         uint64
	P_log_lgameLhdDailyCntScore    uint64
	P_log_lgameLhdDailyScore       int64
	P_log_lgameLhdCntScore         uint64
	P_log_lgameWxhhDelScore        uint64
	P_log_lgameWxhhAddScore        uint64
	P_log_lgameWxhhDailyCntScore   uint64
	P_log_lgameWxhhDailyScore      int64
	P_log_lgameWxhhCntScore        uint64
	P_log_lgameShuihuDelScore      uint64
	P_log_lgameShuihuAddScore      uint64
	P_log_lgameShuihuDailyCntScore uint64
	P_log_lgameShuihuDailyScore    int64
	P_log_lgameShuihuCntScore      uint64
	P_log_lgameShuihuCfg           int32
	P_log_lgameNiuniuDelScore      uint64
	P_log_lgameNiuniuAddScore      uint64
	P_log_lgameNiuniuDailyCntScore uint64
	P_log_lgameNiuniuDailyScore    int64
	P_log_lgameNiuniuCntScore      uint64
	P_log_gameScoreCost            uint64
	P_log_gameScoreGet             uint64
	P_log_lvredbag                 uint64
	P_log_lgameNiuniuZDScore       int64
	P_log_wxname                   string
	P_log_lastloginDate            string
}

func (self *P_SRecodLog) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(uint32(63))
	packer.PackUInt64(self.P_log_id)
	packer.PackString(self.P_log_name)
	packer.PackUInt64(self.P_log_ownerid)
	packer.PackUInt64(self.P_log_platform)
	packer.PackUInt32(self.P_log_lastLoginDay)
	packer.PackUInt32(self.P_log_totalLoginDays)
	packer.PackString(self.P_log_createDate)
	packer.PackUInt32(self.P_log_inroomtime)
	packer.PackUInt32(self.P_log_lastSaveTime)
	packer.PackString(self.P_log_device)
	packer.PackUInt64(self.P_log_score)
	packer.PackUInt32(self.P_log_scoreResetTick)
	packer.PackInt64(self.P_log_scoreRate)
	packer.PackUInt64(self.P_log_scoreFishingGet)
	packer.PackUInt64(self.P_log_scoreFishingCost)
	packer.PackInt64(self.P_log_scoreFishingDayNum)
	packer.PackInt64(self.P_log_scoreChangeDt)
	packer.PackUInt64(self.P_log_dayOlTime)
	packer.PackUInt64(self.P_log_lgameFruitDelScore)
	packer.PackUInt64(self.P_log_lgameFruitAddScore)
	packer.PackUInt64(self.P_log_lgameFruitDailyCntScore)
	packer.PackInt64(self.P_log_lgameFruitDailyScore)
	packer.PackUInt64(self.P_log_lgameFruitCntScore)
	packer.PackString(self.P_log_sm_name)
	packer.PackString(self.P_log_sm_phone)
	packer.PackString(self.P_log_sm_idcard)
	packer.PackUInt64(self.P_log_phonenum)
	packer.PackString(self.P_log_createversion)
	packer.PackUInt64(self.P_log_shootnum)
	packer.PackUInt64(self.P_log_klogindays)
	packer.PackUInt64(self.P_log_maxklogindays)
	packer.PackUInt64(self.P_log_klogindaysLoginTimes)
	packer.PackString(self.P_log_cmtversion)
	packer.PackString(self.P_log_xgtoken)
	packer.PackUInt64(self.P_log_scoreGetT)
	packer.PackUInt64(self.P_log_scoreCostT)
	packer.PackUInt64(self.P_log_lgameLhdDelScore)
	packer.PackUInt64(self.P_log_lgameLhdAddScore)
	packer.PackUInt64(self.P_log_lgameLhdDailyCntScore)
	packer.PackInt64(self.P_log_lgameLhdDailyScore)
	packer.PackUInt64(self.P_log_lgameLhdCntScore)
	packer.PackUInt64(self.P_log_lgameWxhhDelScore)
	packer.PackUInt64(self.P_log_lgameWxhhAddScore)
	packer.PackUInt64(self.P_log_lgameWxhhDailyCntScore)
	packer.PackInt64(self.P_log_lgameWxhhDailyScore)
	packer.PackUInt64(self.P_log_lgameWxhhCntScore)
	packer.PackUInt64(self.P_log_lgameShuihuDelScore)
	packer.PackUInt64(self.P_log_lgameShuihuAddScore)
	packer.PackUInt64(self.P_log_lgameShuihuDailyCntScore)
	packer.PackInt64(self.P_log_lgameShuihuDailyScore)
	packer.PackUInt64(self.P_log_lgameShuihuCntScore)
	packer.PackInt32(self.P_log_lgameShuihuCfg)
	packer.PackUInt64(self.P_log_lgameNiuniuDelScore)
	packer.PackUInt64(self.P_log_lgameNiuniuAddScore)
	packer.PackUInt64(self.P_log_lgameNiuniuDailyCntScore)
	packer.PackInt64(self.P_log_lgameNiuniuDailyScore)
	packer.PackUInt64(self.P_log_lgameNiuniuCntScore)
	packer.PackUInt64(self.P_log_gameScoreCost)
	packer.PackUInt64(self.P_log_gameScoreGet)
	packer.PackUInt64(self.P_log_lvredbag)
	packer.PackInt64(self.P_log_lgameNiuniuZDScore)
	packer.PackString(self.P_log_wxname)
	packer.PackString(self.P_log_lastloginDate)
}

func (self *P_SRecodLog) Unpack(unpacker protocolbase.IUnpacker) int {
	var (
		cret          int    = 0
		__rec_count__ uint32 = 0
		ret           int    = 0
	)
	cret, __rec_count__ = unpacker.UnPackUInt32()
	if cret != 0 {
		return cret
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_id = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_name = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_ownerid = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_platform = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lastLoginDay = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_totalLoginDays = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_createDate = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_inroomtime = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lastSaveTime = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_device = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_score = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_scoreResetTick = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_scoreRate = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_scoreFishingGet = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_scoreFishingCost = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_scoreFishingDayNum = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_scoreChangeDt = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_dayOlTime = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameFruitDelScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameFruitAddScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameFruitDailyCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameFruitDailyScore = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameFruitCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_sm_name = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_sm_phone = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_sm_idcard = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_phonenum = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_createversion = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_shootnum = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_klogindays = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_maxklogindays = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_klogindaysLoginTimes = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_cmtversion = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_xgtoken = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_scoreGetT = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_scoreCostT = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameLhdDelScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameLhdAddScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameLhdDailyCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameLhdDailyScore = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameLhdCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameWxhhDelScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameWxhhAddScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameWxhhDailyCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameWxhhDailyScore = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameWxhhCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameShuihuDelScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameShuihuAddScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameShuihuDailyCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameShuihuDailyScore = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameShuihuCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameShuihuCfg = unpacker.UnPackInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameNiuniuDelScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameNiuniuAddScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameNiuniuDailyCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameNiuniuDailyScore = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameNiuniuCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_gameScoreCost = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_gameScoreGet = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lvredbag = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lgameNiuniuZDScore = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_wxname = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_log_lastloginDate = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	return ret
}

type P_SPlayerData struct {
	P_id                       uint64
	P_name                     string
	P_ownerid                  uint64
	P_sex                      uint32
	P_lastNoticeId             uint32
	P_maskFlag                 uint64
	P_lastLoginDay             uint32
	P_totalLoginDays           uint32
	P_createDate               string
	P_inroomTime               uint32
	P_lastSaveTime             uint32
	P_device                   string
	P_score                    uint64
	P_scoreResetTick           uint32
	P_scoreRate                int64
	P_scoreFishingGet          uint64
	P_scoreFishingCost         uint64
	P_scoreFishingDayNum       int64
	P_scoreChangeDt            uint64
	P_dayOlTime                uint64
	P_sm_name                  string
	P_sm_phone                 string
	P_sm_idcard                string
	P_scoreGetT                uint64
	P_scoreCostT               uint64
	P_lgameFruitDelScore       uint64
	P_lgameFruitAddScore       uint64
	P_lgameFruitDailyCntScore  uint64
	P_lgameFruitDailyScore     int64
	P_lgameFruitCntScore       uint64
	P_plataccount              string
	P_lgameLhdDelScore         uint64
	P_lgameLhdAddScore         uint64
	P_lgameLhdDailyCntScore    uint64
	P_lgameLhdDailyScore       int64
	P_lgameLhdCntScore         uint64
	P_lgameWxhhDelScore        uint64
	P_lgameWxhhAddScore        uint64
	P_lgameWxhhDailyCntScore   uint64
	P_lgameWxhhDailyScore      int64
	P_lgameWxhhCntScore        uint64
	P_lgameShuihuDelScore      uint64
	P_lgameShuihuAddScore      uint64
	P_lgameShuihuDailyCntScore uint64
	P_lgameShuihuDailyScore    int64
	P_lgameShuihuCntScore      uint64
	P_lgameShuihuCfg           int32
	P_lgameNiuniuDelScore      uint64
	P_lgameNiuniuAddScore      uint64
	P_lgameNiuniuDailyCntScore uint64
	P_lgameNiuniuDailyScore    int64
	P_lgameNiuniuCntScore      uint64
	P_dealCount                uint64
	P_sign                     string
	P_getAwardDay              uint32
	P_gameScoreCost            uint64
	P_gameScoreGet             uint64
	P_lvredbag                 uint32
	P_bindwx                   uint32
	P_warheadvalue             uint64
	P_lgameNiuniuZDScore       int64
	P_wxname                   string
	P_lastloginDate            string
}

func (self *P_SPlayerData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(uint32(63))
	packer.PackUInt64(self.P_id)
	packer.PackString(self.P_name)
	packer.PackUInt64(self.P_ownerid)
	packer.PackUInt32(self.P_sex)
	packer.PackUInt32(self.P_lastNoticeId)
	packer.PackUInt64(self.P_maskFlag)
	packer.PackUInt32(self.P_lastLoginDay)
	packer.PackUInt32(self.P_totalLoginDays)
	packer.PackString(self.P_createDate)
	packer.PackUInt32(self.P_inroomTime)
	packer.PackUInt32(self.P_lastSaveTime)
	packer.PackString(self.P_device)
	packer.PackUInt64(self.P_score)
	packer.PackUInt32(self.P_scoreResetTick)
	packer.PackInt64(self.P_scoreRate)
	packer.PackUInt64(self.P_scoreFishingGet)
	packer.PackUInt64(self.P_scoreFishingCost)
	packer.PackInt64(self.P_scoreFishingDayNum)
	packer.PackUInt64(self.P_scoreChangeDt)
	packer.PackUInt64(self.P_dayOlTime)
	packer.PackString(self.P_sm_name)
	packer.PackString(self.P_sm_phone)
	packer.PackString(self.P_sm_idcard)
	packer.PackUInt64(self.P_scoreGetT)
	packer.PackUInt64(self.P_scoreCostT)
	packer.PackUInt64(self.P_lgameFruitDelScore)
	packer.PackUInt64(self.P_lgameFruitAddScore)
	packer.PackUInt64(self.P_lgameFruitDailyCntScore)
	packer.PackInt64(self.P_lgameFruitDailyScore)
	packer.PackUInt64(self.P_lgameFruitCntScore)
	packer.PackString(self.P_plataccount)
	packer.PackUInt64(self.P_lgameLhdDelScore)
	packer.PackUInt64(self.P_lgameLhdAddScore)
	packer.PackUInt64(self.P_lgameLhdDailyCntScore)
	packer.PackInt64(self.P_lgameLhdDailyScore)
	packer.PackUInt64(self.P_lgameLhdCntScore)
	packer.PackUInt64(self.P_lgameWxhhDelScore)
	packer.PackUInt64(self.P_lgameWxhhAddScore)
	packer.PackUInt64(self.P_lgameWxhhDailyCntScore)
	packer.PackInt64(self.P_lgameWxhhDailyScore)
	packer.PackUInt64(self.P_lgameWxhhCntScore)
	packer.PackUInt64(self.P_lgameShuihuDelScore)
	packer.PackUInt64(self.P_lgameShuihuAddScore)
	packer.PackUInt64(self.P_lgameShuihuDailyCntScore)
	packer.PackInt64(self.P_lgameShuihuDailyScore)
	packer.PackUInt64(self.P_lgameShuihuCntScore)
	packer.PackInt32(self.P_lgameShuihuCfg)
	packer.PackUInt64(self.P_lgameNiuniuDelScore)
	packer.PackUInt64(self.P_lgameNiuniuAddScore)
	packer.PackUInt64(self.P_lgameNiuniuDailyCntScore)
	packer.PackInt64(self.P_lgameNiuniuDailyScore)
	packer.PackUInt64(self.P_lgameNiuniuCntScore)
	packer.PackUInt64(self.P_dealCount)
	packer.PackString(self.P_sign)
	packer.PackUInt32(self.P_getAwardDay)
	packer.PackUInt64(self.P_gameScoreCost)
	packer.PackUInt64(self.P_gameScoreGet)
	packer.PackUInt32(self.P_lvredbag)
	packer.PackUInt32(self.P_bindwx)
	packer.PackUInt64(self.P_warheadvalue)
	packer.PackInt64(self.P_lgameNiuniuZDScore)
	packer.PackString(self.P_wxname)
	packer.PackString(self.P_lastloginDate)
}

func (self *P_SPlayerData) Unpack(unpacker protocolbase.IUnpacker) int {
	var (
		cret          int    = 0
		__rec_count__ uint32 = 0
		ret           int    = 0
	)
	cret, __rec_count__ = unpacker.UnPackUInt32()
	if cret != 0 {
		return cret
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_id = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_name = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_ownerid = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_sex = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lastNoticeId = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_maskFlag = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lastLoginDay = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_totalLoginDays = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_createDate = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_inroomTime = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lastSaveTime = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_device = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_score = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_scoreResetTick = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_scoreRate = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_scoreFishingGet = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_scoreFishingCost = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_scoreFishingDayNum = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_scoreChangeDt = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_dayOlTime = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_sm_name = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_sm_phone = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_sm_idcard = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_scoreGetT = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_scoreCostT = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameFruitDelScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameFruitAddScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameFruitDailyCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameFruitDailyScore = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameFruitCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_plataccount = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameLhdDelScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameLhdAddScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameLhdDailyCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameLhdDailyScore = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameLhdCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameWxhhDelScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameWxhhAddScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameWxhhDailyCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameWxhhDailyScore = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameWxhhCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameShuihuDelScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameShuihuAddScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameShuihuDailyCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameShuihuDailyScore = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameShuihuCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameShuihuCfg = unpacker.UnPackInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameNiuniuDelScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameNiuniuAddScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameNiuniuDailyCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameNiuniuDailyScore = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameNiuniuCntScore = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_dealCount = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_sign = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_getAwardDay = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_gameScoreCost = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_gameScoreGet = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lvredbag = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_bindwx = unpacker.UnPackUInt32()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_warheadvalue = unpacker.UnPackUInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lgameNiuniuZDScore = unpacker.UnPackInt64()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_wxname = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	if __rec_count__ > 0 {
		__rec_count__ = __rec_count__ - 1
		ret, self.P_lastloginDate = unpacker.UnPackString()
		if ret != 0 {
			return ret
		}
	}

	return ret
}

type P_SPlayerCache struct {
	P_playerId      uint64
	P_owner         uint64
	P_score         uint64
	P_warhead       uint64
	P_gameScoreGet  uint64
	P_gameScoreCost uint64
	P_scoreGet      uint64
	P_scoreCost     uint64
	P_level         uint64
	P_cridet        uint64
	P_logincount    uint64
	P_gametime      uint64
	P_daygametime   uint64
	P_createtime    string
	P_cachetime     string
	P_plataccount   string
	P_wxname        string
	P_lastlogintime string
}

func (self *P_SPlayerCache) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt64(self.P_playerId)
	packer.PackUInt64(self.P_owner)
	packer.PackUInt64(self.P_score)
	packer.PackUInt64(self.P_warhead)
	packer.PackUInt64(self.P_gameScoreGet)
	packer.PackUInt64(self.P_gameScoreCost)
	packer.PackUInt64(self.P_scoreGet)
	packer.PackUInt64(self.P_scoreCost)
	packer.PackUInt64(self.P_level)
	packer.PackUInt64(self.P_cridet)
	packer.PackUInt64(self.P_logincount)
	packer.PackUInt64(self.P_gametime)
	packer.PackUInt64(self.P_daygametime)
	packer.PackString(self.P_createtime)
	packer.PackString(self.P_cachetime)
	packer.PackString(self.P_plataccount)
	packer.PackString(self.P_wxname)
	packer.PackString(self.P_lastlogintime)
}

func (self *P_SPlayerCache) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_playerId = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_owner = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_score = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_warhead = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_gameScoreGet = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_gameScoreCost = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_scoreGet = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_scoreCost = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_level = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_cridet = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_logincount = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_gametime = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_daygametime = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_createtime = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_cachetime = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_plataccount = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wxname = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_lastlogintime = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_PlayerValue struct {
	P_field  uint32
	P_pvalue int64
}

func (self *P_PlayerValue) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.P_field)
	packer.PackInt64(self.P_pvalue)
}

func (self *P_PlayerValue) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_field = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_pvalue = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_ReqSlotDataShuiHu struct {
	P_BetIndex  uint32
	P_ReelIndex uint32
	P_gType     uint32
}

func (self *P_C2S_ReqSlotDataShuiHu) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_ReqSlotDataShuiHu
}
func (self *P_C2S_ReqSlotDataShuiHu) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_BetIndex)
	packer.PackUInt32(self.P_ReelIndex)
	packer.PackUInt32(self.P_gType)
}

func (self *P_C2S_ReqSlotDataShuiHu) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_BetIndex = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_ReelIndex = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_gType = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_ReqSlotDataShuiHu struct {
	P_Money        uint64
	P_Odds         uint64
	P_FreeGameLoop uint32
	P_Data         [15]uint32
}

func (self *P_S2C_ReqSlotDataShuiHu) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_ReqSlotDataShuiHu
}
func (self *P_S2C_ReqSlotDataShuiHu) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_Money)
	packer.PackUInt64(self.P_Odds)
	packer.PackUInt32(self.P_FreeGameLoop)
	packer.PackUInt32(uint32(15))
	for i := 1; i < 15; i++ {
		packer.PackUInt32(self.P_Data[i])
	}
}

func (self *P_S2C_ReqSlotDataShuiHu) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_Money = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_Odds = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_FreeGameLoop = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		for i := 1; i < int(count); i++ {
			ret, self.P_Data[i] = unpacker.UnPackUInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	return ret
}

type P_S2C_SynBigWinInfoShuiHu struct {
	P_Money    uint64
	P_Odds     uint64
	P_chair_id uint64
}

func (self *P_S2C_SynBigWinInfoShuiHu) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SynBigWinInfoShuiHu
}
func (self *P_S2C_SynBigWinInfoShuiHu) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_Money)
	packer.PackUInt64(self.P_Odds)
	packer.PackUInt64(self.P_chair_id)
}

func (self *P_S2C_SynBigWinInfoShuiHu) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_Money = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_Odds = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_chair_id = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_SynLitteGameError struct {
	P_result uint32
}

func (self *P_S2C_SynLitteGameError) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SynLitteGameError
}
func (self *P_S2C_SynLitteGameError) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
}

func (self *P_S2C_SynLitteGameError) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_ShowLitteGame struct {
	P_result uint32
}

func (self *P_C2S_ShowLitteGame) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_ShowLitteGame
}
func (self *P_C2S_ShowLitteGame) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
}

func (self *P_C2S_ShowLitteGame) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_ReqShuihuRecord struct {
	P_gType uint32
}

func (self *P_C2S_ReqShuihuRecord) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_ReqShuihuRecord
}
func (self *P_C2S_ReqShuihuRecord) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_gType)
}

func (self *P_C2S_ReqShuihuRecord) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_gType = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_ReplyShuihuRecord struct {
	P_allRecord []*P_ShuiHuRecord
	P_myRecord  []*P_ShuiHuRecord
}

func (self *P_S2C_ReplyShuihuRecord) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_ReplyShuihuRecord
}
func (self *P_S2C_ReplyShuihuRecord) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(uint32(len(self.P_allRecord)))
	for i := 1; i < len(self.P_allRecord); i++ {
		self.P_allRecord[i].Pack(packer, false)
	}
	packer.PackUInt32(uint32(len(self.P_myRecord)))
	for i := 1; i < len(self.P_myRecord); i++ {
		self.P_myRecord[i].Pack(packer, false)
	}
}

func (self *P_S2C_ReplyShuihuRecord) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_allRecord = make([]*P_ShuiHuRecord, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_ShuiHuRecord{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_allRecord = append(self.P_allRecord, item)
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_myRecord = make([]*P_ShuiHuRecord, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_ShuiHuRecord{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_myRecord = append(self.P_myRecord, item)
		}
	}
	return ret
}

type P_C2S_ReqSlotFreeDataShuiHu struct {
	P_gType uint32
}

func (self *P_C2S_ReqSlotFreeDataShuiHu) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_ReqSlotFreeDataShuiHu
}
func (self *P_C2S_ReqSlotFreeDataShuiHu) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_gType)
}

func (self *P_C2S_ReqSlotFreeDataShuiHu) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_gType = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_ReqSlotFreeDataShuiHu struct {
	P_Money             uint64
	P_freeGameCount     int32
	P_box_index         int32
	P_center_index_list [4]int32
}

func (self *P_S2C_ReqSlotFreeDataShuiHu) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_ReqSlotFreeDataShuiHu
}
func (self *P_S2C_ReqSlotFreeDataShuiHu) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_Money)
	packer.PackInt32(self.P_freeGameCount)
	packer.PackInt32(self.P_box_index)
	packer.PackUInt32(uint32(4))
	for i := 1; i < 4; i++ {
		packer.PackInt32(self.P_center_index_list[i])
	}
}

func (self *P_S2C_ReqSlotFreeDataShuiHu) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_Money = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_freeGameCount = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_box_index = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		for i := 1; i < int(count); i++ {
			ret, self.P_center_index_list[i] = unpacker.UnPackInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	return ret
}

type P_S2C_FreeGameEndShuiHu struct {
	P_iFreeGameCount int32
}

func (self *P_S2C_FreeGameEndShuiHu) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_FreeGameEndShuiHu
}
func (self *P_S2C_FreeGameEndShuiHu) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackInt32(self.P_iFreeGameCount)
}

func (self *P_S2C_FreeGameEndShuiHu) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_iFreeGameCount = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_DZPK_CreateRoom struct {
	P_result     uint32
	P_roomID     uint64
	P_gold       uint64
	P_minBet     uint32
	P_defaultBet uint32
}

func (self *P_S2C_LG_DZPK_CreateRoom) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_DZPK_CreateRoom
}
func (self *P_S2C_LG_DZPK_CreateRoom) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackUInt64(self.P_roomID)
	packer.PackUInt64(self.P_gold)
	packer.PackUInt32(self.P_minBet)
	packer.PackUInt32(self.P_defaultBet)
}

func (self *P_S2C_LG_DZPK_CreateRoom) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_roomID = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_minBet = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_defaultBet = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_DZPK_CreateRoom struct {
	P_roomID uint64
	P_inGold uint64
	P_limit  uint32
}

func (self *P_C2S_LG_DZPK_CreateRoom) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_DZPK_CreateRoom
}
func (self *P_C2S_LG_DZPK_CreateRoom) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_roomID)
	packer.PackUInt64(self.P_inGold)
	packer.PackUInt32(self.P_limit)
}

func (self *P_C2S_LG_DZPK_CreateRoom) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_roomID = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_inGold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_limit = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_DZPK_JoinRoom struct {
	P_result     uint32
	P_roomID     uint64
	P_gold       uint64
	P_toPlayerID uint64
	P_toGold     uint64
	P_toName     string
	P_minBet     uint32
	P_defaultBet uint32
	P_name       string
	P_limitGold  uint64
}

func (self *P_S2C_LG_DZPK_JoinRoom) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_DZPK_JoinRoom
}
func (self *P_S2C_LG_DZPK_JoinRoom) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackUInt64(self.P_roomID)
	packer.PackUInt64(self.P_gold)
	packer.PackUInt64(self.P_toPlayerID)
	packer.PackUInt64(self.P_toGold)
	packer.PackString(self.P_toName)
	packer.PackUInt32(self.P_minBet)
	packer.PackUInt32(self.P_defaultBet)
	packer.PackString(self.P_name)
	packer.PackUInt64(self.P_limitGold)
}

func (self *P_S2C_LG_DZPK_JoinRoom) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_roomID = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_toPlayerID = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_toGold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_toName = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_minBet = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_defaultBet = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_name = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_limitGold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_DZPK_JoinRoom struct {
	P_roomID uint64
}

func (self *P_C2S_LG_DZPK_JoinRoom) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_DZPK_JoinRoom
}
func (self *P_C2S_LG_DZPK_JoinRoom) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_roomID)
}

func (self *P_C2S_LG_DZPK_JoinRoom) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_roomID = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_DZPK_Ready struct {
	P_result     uint32
	P_toPlayerID uint64
}

func (self *P_S2C_LG_DZPK_Ready) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_DZPK_Ready
}
func (self *P_S2C_LG_DZPK_Ready) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackUInt64(self.P_toPlayerID)
}

func (self *P_S2C_LG_DZPK_Ready) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_toPlayerID = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_DZPK_Ready struct {
}

func (self *P_C2S_LG_DZPK_Ready) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_DZPK_Ready
}
func (self *P_C2S_LG_DZPK_Ready) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
}

func (self *P_C2S_LG_DZPK_Ready) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	return ret
}

type P_S2C_LG_DZPK_StartGame struct {
	P_zang     int32
	P_startPos int32
	P_smallPos int32
	P_var1     uint32
	P_color1   uint32
	P_var2     uint32
	P_color2   uint32
	P_gold1    uint64
	P_gold2    uint64
}

func (self *P_S2C_LG_DZPK_StartGame) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_DZPK_StartGame
}
func (self *P_S2C_LG_DZPK_StartGame) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackInt32(self.P_zang)
	packer.PackInt32(self.P_startPos)
	packer.PackInt32(self.P_smallPos)
	packer.PackUInt32(self.P_var1)
	packer.PackUInt32(self.P_color1)
	packer.PackUInt32(self.P_var2)
	packer.PackUInt32(self.P_color2)
	packer.PackUInt64(self.P_gold1)
	packer.PackUInt64(self.P_gold2)
}

func (self *P_S2C_LG_DZPK_StartGame) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_zang = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_startPos = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_smallPos = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var1 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color1 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var2 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color2 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold1 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold2 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_DZPK_ExitRoom struct {
	P_gameType uint32
}

func (self *P_C2S_LG_DZPK_ExitRoom) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_DZPK_ExitRoom
}
func (self *P_C2S_LG_DZPK_ExitRoom) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_gameType)
}

func (self *P_C2S_LG_DZPK_ExitRoom) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_gameType = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_DZPK_ExitRoom struct {
	P_result     uint32
	P_toPlayerID uint64
}

func (self *P_S2C_LG_DZPK_ExitRoom) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_DZPK_ExitRoom
}
func (self *P_S2C_LG_DZPK_ExitRoom) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackUInt64(self.P_toPlayerID)
}

func (self *P_S2C_LG_DZPK_ExitRoom) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_toPlayerID = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_DZPK_OP struct {
	P_opType uint32
	P_opVar  uint32
}

func (self *P_C2S_LG_DZPK_OP) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_DZPK_OP
}
func (self *P_C2S_LG_DZPK_OP) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_opType)
	packer.PackUInt32(self.P_opVar)
}

func (self *P_C2S_LG_DZPK_OP) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_opType = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_opVar = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_DZPK_OP struct {
	P_result      uint32
	P_toPlayerID  uint64
	P_opType      uint32
	P_opVar       uint32
	P_nextPos     int32
	P_curBetState uint32
}

func (self *P_S2C_LG_DZPK_OP) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_DZPK_OP
}
func (self *P_S2C_LG_DZPK_OP) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackUInt64(self.P_toPlayerID)
	packer.PackUInt32(self.P_opType)
	packer.PackUInt32(self.P_opVar)
	packer.PackInt32(self.P_nextPos)
	packer.PackUInt32(self.P_curBetState)
}

func (self *P_S2C_LG_DZPK_OP) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_toPlayerID = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_opType = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_opVar = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_nextPos = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_curBetState = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_DZPK_EndGame struct {
	P_gold1  uint64
	P_gold2  uint64
	P_tgold  uint64
	P_param  uint64
	P_var1   uint32
	P_var2   uint32
	P_var3   uint32
	P_var4   uint32
	P_var5   uint32
	P_var6   uint32
	P_var7   uint32
	P_color1 uint32
	P_color2 uint32
	P_color3 uint32
	P_color4 uint32
	P_color5 uint32
	P_color6 uint32
	P_color7 uint32
}

func (self *P_S2C_LG_DZPK_EndGame) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_DZPK_EndGame
}
func (self *P_S2C_LG_DZPK_EndGame) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_gold1)
	packer.PackUInt64(self.P_gold2)
	packer.PackUInt64(self.P_tgold)
	packer.PackUInt64(self.P_param)
	packer.PackUInt32(self.P_var1)
	packer.PackUInt32(self.P_var2)
	packer.PackUInt32(self.P_var3)
	packer.PackUInt32(self.P_var4)
	packer.PackUInt32(self.P_var5)
	packer.PackUInt32(self.P_var6)
	packer.PackUInt32(self.P_var7)
	packer.PackUInt32(self.P_color1)
	packer.PackUInt32(self.P_color2)
	packer.PackUInt32(self.P_color3)
	packer.PackUInt32(self.P_color4)
	packer.PackUInt32(self.P_color5)
	packer.PackUInt32(self.P_color6)
	packer.PackUInt32(self.P_color7)
}

func (self *P_S2C_LG_DZPK_EndGame) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_gold1 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold2 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_tgold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_param = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_var1 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var2 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var3 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var4 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var5 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var6 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var7 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color1 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color2 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color3 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color4 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color5 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color6 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color7 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_DZPK_SendPoker struct {
	P_var1   uint32
	P_color1 uint32
	P_var2   uint32
	P_color2 uint32
	P_var3   uint32
	P_color3 uint32
	P_state  uint32
}

func (self *P_S2C_LG_DZPK_SendPoker) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_DZPK_SendPoker
}
func (self *P_S2C_LG_DZPK_SendPoker) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_var1)
	packer.PackUInt32(self.P_color1)
	packer.PackUInt32(self.P_var2)
	packer.PackUInt32(self.P_color2)
	packer.PackUInt32(self.P_var3)
	packer.PackUInt32(self.P_color3)
	packer.PackUInt32(self.P_state)
}

func (self *P_S2C_LG_DZPK_SendPoker) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_var1 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color1 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var2 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color2 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var3 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color3 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_state = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_DZPK_RequestRoom struct {
	P_roomID   uint64
	P_playerID uint64
	P_gold     uint64
	P_name     string
}

func (self *P_S2C_LG_DZPK_RequestRoom) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_DZPK_RequestRoom
}
func (self *P_S2C_LG_DZPK_RequestRoom) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_roomID)
	packer.PackUInt64(self.P_playerID)
	packer.PackUInt64(self.P_gold)
	packer.PackString(self.P_name)
}

func (self *P_S2C_LG_DZPK_RequestRoom) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_roomID = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_playerID = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_name = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_DZPK_RequestRoom struct {
	P_roomID uint64
}

func (self *P_C2S_LG_DZPK_RequestRoom) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_DZPK_RequestRoom
}
func (self *P_C2S_LG_DZPK_RequestRoom) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_roomID)
}

func (self *P_C2S_LG_DZPK_RequestRoom) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_roomID = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_DZPK_KickRoom struct {
}

func (self *P_S2C_LG_DZPK_KickRoom) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_DZPK_KickRoom
}
func (self *P_S2C_LG_DZPK_KickRoom) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
}

func (self *P_S2C_LG_DZPK_KickRoom) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	return ret
}

type P_C2S_LG_Hcpy_Request struct {
	P_score1 uint32
	P_score2 uint32
	P_score3 uint32
	P_score4 uint32
	P_score5 uint32
	P_score6 uint32
	P_score7 uint32
	P_score8 uint32
}

func (self *P_C2S_LG_Hcpy_Request) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_Hcpy_Request
}
func (self *P_C2S_LG_Hcpy_Request) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_score1)
	packer.PackUInt32(self.P_score2)
	packer.PackUInt32(self.P_score3)
	packer.PackUInt32(self.P_score4)
	packer.PackUInt32(self.P_score5)
	packer.PackUInt32(self.P_score6)
	packer.PackUInt32(self.P_score7)
	packer.PackUInt32(self.P_score8)
}

func (self *P_C2S_LG_Hcpy_Request) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_score1 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_score2 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_score3 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_score4 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_score5 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_score6 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_score7 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_score8 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_Hcpy_Request struct {
	P_result uint32
	P_retIdx uint32
	P_gold   uint64
}

func (self *P_S2C_LG_Hcpy_Request) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_Hcpy_Request
}
func (self *P_S2C_LG_Hcpy_Request) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackUInt32(self.P_retIdx)
	packer.PackUInt64(self.P_gold)
}

func (self *P_S2C_LG_Hcpy_Request) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_retIdx = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_Start_Request struct {
	P_lgtype uint32
	P_atype  uint32
}

func (self *P_C2S_LG_Start_Request) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_Start_Request
}
func (self *P_C2S_LG_Start_Request) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_lgtype)
	packer.PackUInt32(self.P_atype)
}

func (self *P_C2S_LG_Start_Request) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_atype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_LHD_Bet_All struct {
	P_bets     [55]uint32
	P_selfbets [55]uint32
}

func (self *P_S2C_LG_LHD_Bet_All) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_LHD_Bet_All
}
func (self *P_S2C_LG_LHD_Bet_All) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(uint32(55))
	for i := 1; i < 55; i++ {
		packer.PackUInt32(self.P_bets[i])
	}
	packer.PackUInt32(uint32(55))
	for i := 1; i < 55; i++ {
		packer.PackUInt32(self.P_selfbets[i])
	}
}

func (self *P_S2C_LG_LHD_Bet_All) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		for i := 1; i < int(count); i++ {
			ret, self.P_bets[i] = unpacker.UnPackUInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		for i := 1; i < int(count); i++ {
			ret, self.P_selfbets[i] = unpacker.UnPackUInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	return ret
}

type P_S2C_LG_LHD_State struct {
	P_state uint32
	P_stime uint32
}

func (self *P_S2C_LG_LHD_State) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_LHD_State
}
func (self *P_S2C_LG_LHD_State) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_state)
	packer.PackUInt32(self.P_stime)
}

func (self *P_S2C_LG_LHD_State) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_state = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_stime = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_LHD_Result struct {
	P_result   uint32
	P_gold     uint64
	P_var1     uint32
	P_color1   uint32
	P_var2     uint32
	P_color2   uint32
	P_winname1 string
	P_wingold1 uint64
	P_winname2 string
	P_wingold2 uint64
	P_winname3 string
	P_wingold3 uint64
	P_winGold  int64
}

func (self *P_S2C_LG_LHD_Result) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_LHD_Result
}
func (self *P_S2C_LG_LHD_Result) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackUInt64(self.P_gold)
	packer.PackUInt32(self.P_var1)
	packer.PackUInt32(self.P_color1)
	packer.PackUInt32(self.P_var2)
	packer.PackUInt32(self.P_color2)
	packer.PackString(self.P_winname1)
	packer.PackUInt64(self.P_wingold1)
	packer.PackString(self.P_winname2)
	packer.PackUInt64(self.P_wingold2)
	packer.PackString(self.P_winname3)
	packer.PackUInt64(self.P_wingold3)
	packer.PackInt64(self.P_winGold)
}

func (self *P_S2C_LG_LHD_Result) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_var1 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color1 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var2 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_color2 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname1 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold1 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname2 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold2 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname3 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold3 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winGold = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_Req_AllHistory struct {
	P_atype uint32
}

func (self *P_C2S_LG_Req_AllHistory) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_Req_AllHistory
}
func (self *P_C2S_LG_Req_AllHistory) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_atype)
}

func (self *P_C2S_LG_Req_AllHistory) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_atype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_Req_AllHistory struct {
	P_allRecord []*P_LHDRecord
}

func (self *P_S2C_LG_Req_AllHistory) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_Req_AllHistory
}
func (self *P_S2C_LG_Req_AllHistory) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(uint32(len(self.P_allRecord)))
	for i := 1; i < len(self.P_allRecord); i++ {
		self.P_allRecord[i].Pack(packer, false)
	}
}

func (self *P_S2C_LG_Req_AllHistory) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_allRecord = make([]*P_LHDRecord, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_LHDRecord{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_allRecord = append(self.P_allRecord, item)
		}
	}
	return ret
}

type P_C2S_LG_LHD_Exit struct {
}

func (self *P_C2S_LG_LHD_Exit) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_LHD_Exit
}
func (self *P_C2S_LG_LHD_Exit) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
}

func (self *P_C2S_LG_LHD_Exit) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	return ret
}

type P_C2S_LG_All_Bet struct {
	P_betIdx  uint32
	P_betType uint32
	P_lgtype  uint32
}

func (self *P_C2S_LG_All_Bet) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_All_Bet
}
func (self *P_C2S_LG_All_Bet) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_betIdx)
	packer.PackUInt32(self.P_betType)
	packer.PackUInt32(self.P_lgtype)
}

func (self *P_C2S_LG_All_Bet) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_betIdx = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_betType = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_All_Bet struct {
	P_betIdx  uint32
	P_betType uint32
	P_pid     uint64
	P_lgtype  uint32
}

func (self *P_S2C_LG_All_Bet) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_All_Bet
}
func (self *P_S2C_LG_All_Bet) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_betIdx)
	packer.PackUInt32(self.P_betType)
	packer.PackUInt64(self.P_pid)
	packer.PackUInt32(self.P_lgtype)
}

func (self *P_S2C_LG_All_Bet) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_betIdx = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_betType = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_pid = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_All_BetMore struct {
	P_betMore []*P_LGBetData
	P_lgtype  uint32
}

func (self *P_C2S_LG_All_BetMore) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_All_BetMore
}
func (self *P_C2S_LG_All_BetMore) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(uint32(len(self.P_betMore)))
	for i := 1; i < len(self.P_betMore); i++ {
		self.P_betMore[i].Pack(packer, false)
	}
	packer.PackUInt32(self.P_lgtype)
}

func (self *P_C2S_LG_All_BetMore) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_betMore = make([]*P_LGBetData, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_LGBetData{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_betMore = append(self.P_betMore, item)
		}
	}
	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_All_BetMore struct {
	P_betMore []*P_LGBetData
	P_lgtype  uint32
}

func (self *P_S2C_LG_All_BetMore) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_All_BetMore
}
func (self *P_S2C_LG_All_BetMore) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(uint32(len(self.P_betMore)))
	for i := 1; i < len(self.P_betMore); i++ {
		self.P_betMore[i].Pack(packer, false)
	}
	packer.PackUInt32(self.P_lgtype)
}

func (self *P_S2C_LG_All_BetMore) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_betMore = make([]*P_LGBetData, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_LGBetData{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_betMore = append(self.P_betMore, item)
		}
	}
	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_NN_Result struct {
	P_result      uint32
	P_gold        uint64
	P_winname1    string
	P_wingold1    int64
	P_winname2    string
	P_wingold2    int64
	P_winname3    string
	P_wingold3    int64
	P_winname4    string
	P_wingold4    int64
	P_winname5    string
	P_wingold5    int64
	P_iMeTianBet  float64
	P_iMeDiBet    float64
	P_iMeXuanBet  float64
	P_iMeHuangBet float64
	P_iMeTianWin  int64
	P_iMeDiWin    int64
	P_iMeXuanWin  int64
	P_iMeHuangWin int64
	P_pokers      []uint32
	P_cardType    []uint32
	P_winType     []uint32
	P_wingold     int64
	P_dealerMoney int64
}

func (self *P_S2C_LG_NN_Result) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_NN_Result
}
func (self *P_S2C_LG_NN_Result) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackUInt64(self.P_gold)
	packer.PackString(self.P_winname1)
	packer.PackInt64(self.P_wingold1)
	packer.PackString(self.P_winname2)
	packer.PackInt64(self.P_wingold2)
	packer.PackString(self.P_winname3)
	packer.PackInt64(self.P_wingold3)
	packer.PackString(self.P_winname4)
	packer.PackInt64(self.P_wingold4)
	packer.PackString(self.P_winname5)
	packer.PackInt64(self.P_wingold5)
	packer.PackDouble(self.P_iMeTianBet)
	packer.PackDouble(self.P_iMeDiBet)
	packer.PackDouble(self.P_iMeXuanBet)
	packer.PackDouble(self.P_iMeHuangBet)
	packer.PackInt64(self.P_iMeTianWin)
	packer.PackInt64(self.P_iMeDiWin)
	packer.PackInt64(self.P_iMeXuanWin)
	packer.PackInt64(self.P_iMeHuangWin)
	packer.PackUInt32(uint32(len(self.P_pokers)))
	for i := 1; i < len(self.P_pokers); i++ {
		packer.PackUInt32(self.P_pokers[i])
	}
	packer.PackUInt32(uint32(len(self.P_cardType)))
	for i := 1; i < len(self.P_cardType); i++ {
		packer.PackUInt32(self.P_cardType[i])
	}
	packer.PackUInt32(uint32(len(self.P_winType)))
	for i := 1; i < len(self.P_winType); i++ {
		packer.PackUInt32(self.P_winType[i])
	}
	packer.PackInt64(self.P_wingold)
	packer.PackInt64(self.P_dealerMoney)
}

func (self *P_S2C_LG_NN_Result) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname1 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold1 = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname2 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold2 = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname3 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold3 = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname4 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold4 = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname5 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold5 = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_iMeTianBet = unpacker.UnPackDouble()
	if ret != 0 {
		return ret
	}
	ret, self.P_iMeDiBet = unpacker.UnPackDouble()
	if ret != 0 {
		return ret
	}
	ret, self.P_iMeXuanBet = unpacker.UnPackDouble()
	if ret != 0 {
		return ret
	}
	ret, self.P_iMeHuangBet = unpacker.UnPackDouble()
	if ret != 0 {
		return ret
	}
	ret, self.P_iMeTianWin = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_iMeDiWin = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_iMeXuanWin = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_iMeHuangWin = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_pokers = make([]uint32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_pokers[i] = unpacker.UnPackUInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_cardType = make([]uint32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_cardType[i] = unpacker.UnPackUInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_winType = make([]uint32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_winType[i] = unpacker.UnPackUInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	ret, self.P_wingold = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_dealerMoney = unpacker.UnPackInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_NN_State struct {
	P_state uint32
	P_stime uint32
}

func (self *P_S2C_LG_NN_State) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_NN_State
}
func (self *P_S2C_LG_NN_State) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_state)
	packer.PackUInt32(self.P_stime)
}

func (self *P_S2C_LG_NN_State) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_state = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_stime = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_Quit struct {
}

func (self *P_C2S_LG_Quit) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_Quit
}
func (self *P_C2S_LG_Quit) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
}

func (self *P_C2S_LG_Quit) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	return ret
}

type P_S2C_LG_NN_Zhuang struct {
	P_name  string
	P_money uint64
}

func (self *P_S2C_LG_NN_Zhuang) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_NN_Zhuang
}
func (self *P_S2C_LG_NN_Zhuang) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_name)
	packer.PackUInt64(self.P_money)
}

func (self *P_S2C_LG_NN_Zhuang) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_name = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_money = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_BeDealer struct {
	P_lgtype uint32
}

func (self *P_C2S_LG_BeDealer) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_BeDealer
}
func (self *P_C2S_LG_BeDealer) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_lgtype)
}

func (self *P_C2S_LG_BeDealer) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_BeDealer struct {
	P_dealersList []*P_LGDealerData
}

func (self *P_S2C_LG_BeDealer) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_BeDealer
}
func (self *P_S2C_LG_BeDealer) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(uint32(len(self.P_dealersList)))
	for i := 1; i < len(self.P_dealersList); i++ {
		self.P_dealersList[i].Pack(packer, false)
	}
}

func (self *P_S2C_LG_BeDealer) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_dealersList = make([]*P_LGDealerData, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_LGDealerData{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_dealersList = append(self.P_dealersList, item)
		}
	}
	return ret
}

type P_C2S_LG_QuestDealer struct {
	P_lgtype uint32
}

func (self *P_C2S_LG_QuestDealer) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_QuestDealer
}
func (self *P_C2S_LG_QuestDealer) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_lgtype)
}

func (self *P_C2S_LG_QuestDealer) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_QuestDealer struct {
	P_lgtype uint32
}

func (self *P_S2C_LG_QuestDealer) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_QuestDealer
}
func (self *P_S2C_LG_QuestDealer) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_lgtype)
}

func (self *P_S2C_LG_QuestDealer) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_ChangeDealer struct {
	P_op uint32
}

func (self *P_S2C_LG_ChangeDealer) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_ChangeDealer
}
func (self *P_S2C_LG_ChangeDealer) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_op)
}

func (self *P_S2C_LG_ChangeDealer) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_op = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_DownDealer struct {
	P_lgtype uint32
}

func (self *P_C2S_LG_DownDealer) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_DownDealer
}
func (self *P_C2S_LG_DownDealer) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_lgtype)
}

func (self *P_C2S_LG_DownDealer) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_LG_GetScoreGift struct {
	P_lgtype uint32
}

func (self *P_C2S_LG_GetScoreGift) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_GetScoreGift
}
func (self *P_C2S_LG_GetScoreGift) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_lgtype)
}

func (self *P_C2S_LG_GetScoreGift) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_GetScoreGift struct {
	P_result uint32
	P_num    uint32
}

func (self *P_S2C_LG_GetScoreGift) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_GetScoreGift
}
func (self *P_S2C_LG_GetScoreGift) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackUInt32(self.P_num)
}

func (self *P_S2C_LG_GetScoreGift) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_num = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_FruitCfg struct {
	P_fruitList []*P_LGFruit
	P_betList   []uint32
}

func (self *P_S2C_LG_FruitCfg) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_FruitCfg
}
func (self *P_S2C_LG_FruitCfg) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(uint32(len(self.P_fruitList)))
	for i := 1; i < len(self.P_fruitList); i++ {
		self.P_fruitList[i].Pack(packer, false)
	}
	packer.PackUInt32(uint32(len(self.P_betList)))
	for i := 1; i < len(self.P_betList); i++ {
		packer.PackUInt32(self.P_betList[i])
	}
}

func (self *P_S2C_LG_FruitCfg) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_fruitList = make([]*P_LGFruit, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_LGFruit{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_fruitList = append(self.P_fruitList, item)
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_betList = make([]uint32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_betList[i] = unpacker.UnPackUInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	return ret
}

type P_S2C_LG_FruitHistory struct {
	P_hisList []int32
}

func (self *P_S2C_LG_FruitHistory) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_FruitHistory
}
func (self *P_S2C_LG_FruitHistory) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(uint32(len(self.P_hisList)))
	for i := 1; i < len(self.P_hisList); i++ {
		packer.PackInt32(self.P_hisList[i])
	}
}

func (self *P_S2C_LG_FruitHistory) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_hisList = make([]int32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_hisList[i] = unpacker.UnPackInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	return ret
}

type P_S2C_LG_Fruit_State struct {
	P_state uint32
	P_stime uint32
}

func (self *P_S2C_LG_Fruit_State) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_Fruit_State
}
func (self *P_S2C_LG_Fruit_State) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_state)
	packer.PackUInt32(self.P_stime)
}

func (self *P_S2C_LG_Fruit_State) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_state = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_stime = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_Fruit_Result struct {
	P_result   uint32
	P_gold     uint64
	P_var1     uint32
	P_winname1 string
	P_wingold1 uint64
	P_winname2 string
	P_wingold2 uint64
	P_winname3 string
	P_wingold3 uint64
	P_winname4 string
	P_wingold4 uint64
	P_winname5 string
	P_wingold5 uint64
	P_wingold  uint64
	P_retType  uint32
	P_retPer   uint32
	P_var2     uint32
	P_var3     uint32
	P_var4     uint32
}

func (self *P_S2C_LG_Fruit_Result) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_Fruit_Result
}
func (self *P_S2C_LG_Fruit_Result) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackUInt64(self.P_gold)
	packer.PackUInt32(self.P_var1)
	packer.PackString(self.P_winname1)
	packer.PackUInt64(self.P_wingold1)
	packer.PackString(self.P_winname2)
	packer.PackUInt64(self.P_wingold2)
	packer.PackString(self.P_winname3)
	packer.PackUInt64(self.P_wingold3)
	packer.PackString(self.P_winname4)
	packer.PackUInt64(self.P_wingold4)
	packer.PackString(self.P_winname5)
	packer.PackUInt64(self.P_wingold5)
	packer.PackUInt64(self.P_wingold)
	packer.PackUInt32(self.P_retType)
	packer.PackUInt32(self.P_retPer)
	packer.PackUInt32(self.P_var2)
	packer.PackUInt32(self.P_var3)
	packer.PackUInt32(self.P_var4)
}

func (self *P_S2C_LG_Fruit_Result) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_var1 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname1 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold1 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname2 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold2 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname3 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold3 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname4 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold4 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname5 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold5 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_retType = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_retPer = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var2 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var3 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_var4 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_Wxhh_State struct {
	P_state uint32
	P_stime uint32
}

func (self *P_S2C_LG_Wxhh_State) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_Wxhh_State
}
func (self *P_S2C_LG_Wxhh_State) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_state)
	packer.PackUInt32(self.P_stime)
}

func (self *P_S2C_LG_Wxhh_State) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_state = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_stime = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_Wxhh_Result struct {
	P_result   uint32
	P_gold     uint64
	P_var1     uint32
	P_winname1 string
	P_wingold1 uint64
	P_winname2 string
	P_wingold2 uint64
	P_winname3 string
	P_wingold3 uint64
	P_winname4 string
	P_wingold4 uint64
	P_winname5 string
	P_wingold5 uint64
	P_wingold  uint64
}

func (self *P_S2C_LG_Wxhh_Result) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_Wxhh_Result
}
func (self *P_S2C_LG_Wxhh_Result) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackUInt64(self.P_gold)
	packer.PackUInt32(self.P_var1)
	packer.PackString(self.P_winname1)
	packer.PackUInt64(self.P_wingold1)
	packer.PackString(self.P_winname2)
	packer.PackUInt64(self.P_wingold2)
	packer.PackString(self.P_winname3)
	packer.PackUInt64(self.P_wingold3)
	packer.PackString(self.P_winname4)
	packer.PackUInt64(self.P_wingold4)
	packer.PackString(self.P_winname5)
	packer.PackUInt64(self.P_wingold5)
	packer.PackUInt64(self.P_wingold)
}

func (self *P_S2C_LG_Wxhh_Result) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_gold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_var1 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname1 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold1 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname2 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold2 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname3 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold3 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname4 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold4 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_winname5 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold5 = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_wingold = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_DoubleKill struct {
	P_lgtype uint32
	P_flag   uint64
	P_var1   uint32
	P_dkList []float64
}

func (self *P_S2C_LG_DoubleKill) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_DoubleKill
}
func (self *P_S2C_LG_DoubleKill) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_lgtype)
	packer.PackUInt64(self.P_flag)
	packer.PackUInt32(self.P_var1)
	packer.PackUInt32(uint32(len(self.P_dkList)))
	for i := 1; i < len(self.P_dkList); i++ {
		packer.PackDouble(self.P_dkList[i])
	}
}

func (self *P_S2C_LG_DoubleKill) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_flag = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_var1 = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_dkList = make([]float64, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_dkList[i] = unpacker.UnPackDouble()
			if ret != 0 {
				return ret
			}
		}
	}
	return ret
}

type P_C2S_LG_BetLogInfo struct {
	P_lgtype uint32
}

func (self *P_C2S_LG_BetLogInfo) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LG_BetLogInfo
}
func (self *P_C2S_LG_BetLogInfo) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_lgtype)
}

func (self *P_C2S_LG_BetLogInfo) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_BetLogInfo struct {
	P_lgtype uint32
	P_blList []uint32
}

func (self *P_S2C_LG_BetLogInfo) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_BetLogInfo
}
func (self *P_S2C_LG_BetLogInfo) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_lgtype)
	packer.PackUInt32(uint32(len(self.P_blList)))
	for i := 1; i < len(self.P_blList); i++ {
		packer.PackUInt32(self.P_blList[i])
	}
}

func (self *P_S2C_LG_BetLogInfo) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_blList = make([]uint32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_blList[i] = unpacker.UnPackUInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	return ret
}

type P_S2C_LG_SynCfg struct {
	P_lgtype uint32
	P_blList []int64
}

func (self *P_S2C_LG_SynCfg) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_SynCfg
}
func (self *P_S2C_LG_SynCfg) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_lgtype)
	packer.PackUInt32(uint32(len(self.P_blList)))
	for i := 1; i < len(self.P_blList); i++ {
		packer.PackInt64(self.P_blList[i])
	}
}

func (self *P_S2C_LG_SynCfg) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_lgtype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_blList = make([]int64, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_blList[i] = unpacker.UnPackInt64()
			if ret != 0 {
				return ret
			}
		}
	}
	return ret
}

type P_S2C_LG_SynZhuang struct {
	P_id    uint64
	P_money uint64
	P_name  string
}

func (self *P_S2C_LG_SynZhuang) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_SynZhuang
}
func (self *P_S2C_LG_SynZhuang) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_id)
	packer.PackUInt64(self.P_money)
	packer.PackString(self.P_name)
}

func (self *P_S2C_LG_SynZhuang) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_money = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_name = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LG_SynPlayerZhuang struct {
	P_state uint64
	P_cnt   int32
}

func (self *P_S2C_LG_SynPlayerZhuang) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LG_SynPlayerZhuang
}
func (self *P_S2C_LG_SynPlayerZhuang) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_state)
	packer.PackInt32(self.P_cnt)
}

func (self *P_S2C_LG_SynPlayerZhuang) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_state = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_cnt = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_Ping struct {
	P_tick uint32
}

func (self *P_C2S_Ping) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_Ping
}
func (self *P_C2S_Ping) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_tick)
}

func (self *P_C2S_Ping) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_tick = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_Ping struct {
	P_tick uint32
}

func (self *P_S2C_Ping) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_Ping
}
func (self *P_S2C_Ping) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_tick)
}

func (self *P_S2C_Ping) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_tick = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_Login struct {
	P_gameid      uint64
	P_account     string
	P_device      string
	P_token       string
	P_platform    uint32
	P_xgtoken     string
	P_csgMD5      string
	P_trackMD5    string
	P_configMD5   string
	P_needCheck   uint32
	P_newdeviceId string
	P_client_2d   bool
}

func (self *P_C2S_Login) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_Login
}
func (self *P_C2S_Login) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_gameid)
	packer.PackString(self.P_account)
	packer.PackString(self.P_device)
	packer.PackString(self.P_token)
	packer.PackUInt32(self.P_platform)
	packer.PackString(self.P_xgtoken)
	packer.PackString(self.P_csgMD5)
	packer.PackString(self.P_trackMD5)
	packer.PackString(self.P_configMD5)
	packer.PackUInt32(self.P_needCheck)
	packer.PackString(self.P_newdeviceId)
	packer.PackBool(self.P_client_2d)
}

func (self *P_C2S_Login) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_gameid = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_account = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_device = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_token = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_platform = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_xgtoken = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_csgMD5 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_trackMD5 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_configMD5 = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_needCheck = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_newdeviceId = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_client_2d = unpacker.UnPackBool()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_Login struct {
	P_result              uint32
	P_token               string
	P_ip                  string
	P_port                uint32
	P_platformAccessToken string
	P_bindAccount         string
	P_gameid              uint64
	P_checktype           uint32
}

func (self *P_S2C_Login) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_Login
}
func (self *P_S2C_Login) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackString(self.P_token)
	packer.PackString(self.P_ip)
	packer.PackUInt32(self.P_port)
	packer.PackString(self.P_platformAccessToken)
	packer.PackString(self.P_bindAccount)
	packer.PackUInt64(self.P_gameid)
	packer.PackUInt32(self.P_checktype)
}

func (self *P_S2C_Login) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_token = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_ip = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_port = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_platformAccessToken = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_bindAccount = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_gameid = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_checktype = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2G_Login struct {
	P_token     string
	P_msgmd5    []byte
	P_scrWidth  uint32
	P_scrHeight uint32
	P_cannonX   int32
	P_cannonY   int32
}

func (self *P_C2G_Login) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2G_Login
}
func (self *P_C2G_Login) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_token)
	packer.PackBytes(self.P_msgmd5)
	packer.PackUInt32(self.P_scrWidth)
	packer.PackUInt32(self.P_scrHeight)
	packer.PackInt32(self.P_cannonX)
	packer.PackInt32(self.P_cannonY)
}

func (self *P_C2G_Login) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_token = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_msgmd5 = unpacker.UnPackBytes()
	if ret != 0 {
		return ret
	}
	ret, self.P_scrWidth = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_scrHeight = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_cannonX = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_cannonY = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_G2C_Login struct {
	P_result    uint32
	P_newplayer bool
}

func (self *P_G2C_Login) GetProId() uint32 {
	return P_COM_GAME_WORLD_G2C_Login
}
func (self *P_G2C_Login) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackBool(self.P_newplayer)
}

func (self *P_G2C_Login) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_newplayer = unpacker.UnPackBool()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_GmCmd struct {
	P_cmd string
}

func (self *P_C2S_GmCmd) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_GmCmd
}
func (self *P_C2S_GmCmd) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_cmd)
}

func (self *P_C2S_GmCmd) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_cmd = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_SystemNotice struct {
	P_id uint32
}

func (self *P_C2S_SystemNotice) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_SystemNotice
}
func (self *P_C2S_SystemNotice) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_id)
}

func (self *P_C2S_SystemNotice) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_GiveNoticeGold struct {
}

func (self *P_C2S_GiveNoticeGold) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_GiveNoticeGold
}
func (self *P_C2S_GiveNoticeGold) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
}

func (self *P_C2S_GiveNoticeGold) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	return ret
}

type P_S2C_SystemNotice struct {
	P_sndata *P_SystemNotice
}

func (self *P_S2C_SystemNotice) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SystemNotice
}
func (self *P_S2C_SystemNotice) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	self.P_sndata.Pack(packer, false)
}

func (self *P_S2C_SystemNotice) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	self.P_sndata = &P_SystemNotice{}

	ret = self.P_sndata.Unpack(unpacker)
	if ret != 0 {
		return ret
	}

	return ret
}

type P_S2C_MsgBox struct {
	P_content string
}

func (self *P_S2C_MsgBox) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_MsgBox
}
func (self *P_S2C_MsgBox) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_content)
}

func (self *P_S2C_MsgBox) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_content = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_ClickUI struct {
	P_uiid uint32
}

func (self *P_C2S_ClickUI) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_ClickUI
}
func (self *P_C2S_ClickUI) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_uiid)
}

func (self *P_C2S_ClickUI) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_uiid = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_HideButtonState struct {
	P_state uint32
}

func (self *P_S2C_HideButtonState) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_HideButtonState
}
func (self *P_S2C_HideButtonState) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_state)
}

func (self *P_S2C_HideButtonState) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_state = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_SyncOwnerRoomList struct {
	P_model uint32
	P_list  []*P_RoomInfo
}

func (self *P_S2C_SyncOwnerRoomList) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SyncOwnerRoomList
}
func (self *P_S2C_SyncOwnerRoomList) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_model)
	packer.PackUInt32(uint32(len(self.P_list)))
	for i := 1; i < len(self.P_list); i++ {
		self.P_list[i].Pack(packer, false)
	}
}

func (self *P_S2C_SyncOwnerRoomList) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_model = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_list = make([]*P_RoomInfo, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_RoomInfo{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_list = append(self.P_list, item)
		}
	}
	return ret
}

type P_S2C_SyncOwnerInfo struct {
	P_info     *P_OwnerInfo
	P_gamelist []uint32
}

func (self *P_S2C_SyncOwnerInfo) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SyncOwnerInfo
}
func (self *P_S2C_SyncOwnerInfo) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	self.P_info.Pack(packer, false)
	packer.PackUInt32(uint32(len(self.P_gamelist)))
	for i := 1; i < len(self.P_gamelist); i++ {
		packer.PackUInt32(self.P_gamelist[i])
	}
}

func (self *P_S2C_SyncOwnerInfo) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	self.P_info = &P_OwnerInfo{}

	ret = self.P_info.Unpack(unpacker)
	if ret != 0 {
		return ret
	}

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_gamelist = make([]uint32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_gamelist[i] = unpacker.UnPackUInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	return ret
}

type P_C2S_ReuestOwnerRoomList struct {
	P_model uint32
}

func (self *P_C2S_ReuestOwnerRoomList) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_ReuestOwnerRoomList
}
func (self *P_C2S_ReuestOwnerRoomList) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_model)
}

func (self *P_C2S_ReuestOwnerRoomList) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_model = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_BindOwner struct {
	P_owner uint64
}

func (self *P_C2S_BindOwner) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_BindOwner
}
func (self *P_C2S_BindOwner) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_owner)
}

func (self *P_C2S_BindOwner) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_owner = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_GiveWarHead struct {
	P_playerid uint64
	P_num      uint32
}

func (self *P_C2S_GiveWarHead) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_GiveWarHead
}
func (self *P_C2S_GiveWarHead) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt64(self.P_playerid)
	packer.PackUInt32(self.P_num)
}

func (self *P_C2S_GiveWarHead) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_playerid = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_num = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_Sign struct {
	P_sign string
}

func (self *P_C2S_Sign) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_Sign
}
func (self *P_C2S_Sign) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_sign)
}

func (self *P_C2S_Sign) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_sign = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_Sign struct {
	P_sign string
}

func (self *P_S2C_Sign) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_Sign
}
func (self *P_S2C_Sign) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_sign)
}

func (self *P_S2C_Sign) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_sign = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_GiveRecord struct {
}

func (self *P_C2S_GiveRecord) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_GiveRecord
}
func (self *P_C2S_GiveRecord) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
}

func (self *P_C2S_GiveRecord) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	return ret
}

type P_S2C_GiveRecord struct {
	P_dealRecord []*P_DealRecord
}

func (self *P_S2C_GiveRecord) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_GiveRecord
}
func (self *P_S2C_GiveRecord) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(uint32(len(self.P_dealRecord)))
	for i := 1; i < len(self.P_dealRecord); i++ {
		self.P_dealRecord[i].Pack(packer, false)
	}
}

func (self *P_S2C_GiveRecord) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_dealRecord = make([]*P_DealRecord, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_DealRecord{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_dealRecord = append(self.P_dealRecord, item)
		}
	}
	return ret
}

type P_S2C_HaveDayAward struct {
	P_dayaward uint32
	P_stime    string
	P_etime    string
}

func (self *P_S2C_HaveDayAward) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_HaveDayAward
}
func (self *P_S2C_HaveDayAward) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_dayaward)
	packer.PackString(self.P_stime)
	packer.PackString(self.P_etime)
}

func (self *P_S2C_HaveDayAward) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_dayaward = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_stime = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_etime = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_GetDayAward struct {
}

func (self *P_C2S_GetDayAward) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_GetDayAward
}
func (self *P_C2S_GetDayAward) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
}

func (self *P_C2S_GetDayAward) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	return ret
}

type P_C2S_BindWxAccount struct {
	P_code string
}

func (self *P_C2S_BindWxAccount) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_BindWxAccount
}
func (self *P_C2S_BindWxAccount) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_code)
}

func (self *P_C2S_BindWxAccount) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_code = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_GetLvRedbag struct {
	P_lv uint32
}

func (self *P_C2S_GetLvRedbag) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_GetLvRedbag
}
func (self *P_C2S_GetLvRedbag) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_lv)
}

func (self *P_C2S_GetLvRedbag) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_lv = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_CdKey struct {
	P_cdkey string
}

func (self *P_C2S_CdKey) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_CdKey
}
func (self *P_C2S_CdKey) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_cdkey)
}

func (self *P_C2S_CdKey) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_cdkey = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_QueryMailList struct {
}

func (self *P_C2S_QueryMailList) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_QueryMailList
}
func (self *P_C2S_QueryMailList) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
}

func (self *P_C2S_QueryMailList) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	return ret
}

type P_S2C_SynMailList struct {
	P_mailList []*P_SMail
}

func (self *P_S2C_SynMailList) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SynMailList
}
func (self *P_S2C_SynMailList) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(uint32(len(self.P_mailList)))
	for i := 1; i < len(self.P_mailList); i++ {
		self.P_mailList[i].Pack(packer, false)
	}
}

func (self *P_S2C_SynMailList) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_mailList = make([]*P_SMail, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_SMail{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_mailList = append(self.P_mailList, item)
		}
	}
	return ret
}

type P_C2S_DeleteMail struct {
	P_mailId uint32
}

func (self *P_C2S_DeleteMail) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_DeleteMail
}
func (self *P_C2S_DeleteMail) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_mailId)
}

func (self *P_C2S_DeleteMail) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_mailId = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_DeleteMail struct {
	P_mailId uint32
}

func (self *P_S2C_DeleteMail) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_DeleteMail
}
func (self *P_S2C_DeleteMail) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_mailId)
}

func (self *P_S2C_DeleteMail) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_mailId = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_IosComment struct {
}

func (self *P_C2S_IosComment) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_IosComment
}
func (self *P_C2S_IosComment) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
}

func (self *P_C2S_IosComment) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	return ret
}

type P_C2S_ChangeCannon struct {
	P_cannonId uint32
}

func (self *P_C2S_ChangeCannon) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_ChangeCannon
}
func (self *P_C2S_ChangeCannon) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_cannonId)
}

func (self *P_C2S_ChangeCannon) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_cannonId = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_ChangeSurface struct {
	P_surfaceId   uint32
	P_surfaceType uint32
}

func (self *P_C2S_ChangeSurface) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_ChangeSurface
}
func (self *P_C2S_ChangeSurface) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_surfaceId)
	packer.PackUInt32(self.P_surfaceType)
}

func (self *P_C2S_ChangeSurface) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_surfaceId = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_surfaceType = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_UploadWxName struct {
	P_wxname string
}

func (self *P_C2S_UploadWxName) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_UploadWxName
}
func (self *P_C2S_UploadWxName) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_wxname)
}

func (self *P_C2S_UploadWxName) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_wxname = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_EnterRoom struct {
	P_model  uint32
	P_roomid uint64
}

func (self *P_C2S_EnterRoom) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_EnterRoom
}
func (self *P_C2S_EnterRoom) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_model)
	packer.PackUInt64(self.P_roomid)
}

func (self *P_C2S_EnterRoom) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_model = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_roomid = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_EnterRoomForward struct {
	P_owner    *P_OwnerInfo
	P_roominfo *P_RoomInfo
}

func (self *P_C2S_EnterRoomForward) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_EnterRoomForward
}
func (self *P_C2S_EnterRoomForward) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	self.P_owner.Pack(packer, false)
	self.P_roominfo.Pack(packer, false)
}

func (self *P_C2S_EnterRoomForward) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	self.P_owner = &P_OwnerInfo{}

	ret = self.P_owner.Unpack(unpacker)
	if ret != 0 {
		return ret
	}

	self.P_roominfo = &P_RoomInfo{}

	ret = self.P_roominfo.Unpack(unpacker)
	if ret != 0 {
		return ret
	}

	return ret
}

type P_S2C_EnterRoomErr struct {
	P_errCode uint32
	P_link    string
}

func (self *P_S2C_EnterRoomErr) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_EnterRoomErr
}
func (self *P_S2C_EnterRoomErr) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_errCode)
	packer.PackString(self.P_link)
}

func (self *P_S2C_EnterRoomErr) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_errCode = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_link = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_SyncItemModify struct {
	P_info []*P_SItemModify
}

func (self *P_S2C_SyncItemModify) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SyncItemModify
}
func (self *P_S2C_SyncItemModify) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(uint32(len(self.P_info)))
	for i := 1; i < len(self.P_info); i++ {
		self.P_info[i].Pack(packer, false)
	}
}

func (self *P_S2C_SyncItemModify) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_info = make([]*P_SItemModify, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_SItemModify{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_info = append(self.P_info, item)
		}
	}
	return ret
}

type P_C2S_UseItem struct {
	P_id uint32
}

func (self *P_C2S_UseItem) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_UseItem
}
func (self *P_C2S_UseItem) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_id)
}

func (self *P_C2S_UseItem) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_UseItem struct {
	P_id  uint32
	P_num uint32
}

func (self *P_S2C_UseItem) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_UseItem
}
func (self *P_S2C_UseItem) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_id)
	packer.PackUInt32(self.P_num)
}

func (self *P_S2C_UseItem) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_num = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_BuyItem struct {
	P_id uint32
}

func (self *P_C2S_BuyItem) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_BuyItem
}
func (self *P_C2S_BuyItem) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_id)
}

func (self *P_C2S_BuyItem) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_BuyItem struct {
	P_id uint32
}

func (self *P_S2C_BuyItem) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_BuyItem
}
func (self *P_S2C_BuyItem) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_id)
}

func (self *P_S2C_BuyItem) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_id = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_SyncPlayerData struct {
	P_pd         *P_SPlayerData
	P_phoneNum   string
	P_serverdays uint32
	P_itemBag    *P_SItemBag
}

func (self *P_S2C_SyncPlayerData) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SyncPlayerData
}
func (self *P_S2C_SyncPlayerData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	self.P_pd.Pack(packer, false)
	packer.PackString(self.P_phoneNum)
	packer.PackUInt32(self.P_serverdays)
	self.P_itemBag.Pack(packer, false)
}

func (self *P_S2C_SyncPlayerData) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	self.P_pd = &P_SPlayerData{}

	ret = self.P_pd.Unpack(unpacker)
	if ret != 0 {
		return ret
	}

	ret, self.P_phoneNum = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_serverdays = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	self.P_itemBag = &P_SItemBag{}

	ret = self.P_itemBag.Unpack(unpacker)
	if ret != 0 {
		return ret
	}

	return ret
}

type P_S2C_InjectLockedAction struct {
	P_token  uint32
	P_who    uint32
	P_action []P_InputAction_Interface
}

func (self *P_S2C_InjectLockedAction) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_InjectLockedAction
}
func (self *P_S2C_InjectLockedAction) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_token)
	packer.PackUInt32(self.P_who)
	packer.PackUInt32(uint32(len(self.P_action)))
	for i := 1; i < len(self.P_action); i++ {
		packer.PackUInt32(self.P_action[i].F_InputAction())
		self.P_action[i].Pack(packer, false)
	}
}

func (self *P_S2C_InjectLockedAction) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_token = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_who = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_action = make([]P_InputAction_Interface, 0, count)
		for i := 1; i < int(count); i++ {
			var item P_InputAction_Interface
			if ot, mret := unpacker.UnPackUInt32(); ot == 0 {
				if mret != P_InputAction_Maxtype {
					if mret == 0 {
						item = &P_IA_sync{}
					} else if mret == 1 {
						item = &P_IA_shoot{}
					} else if mret == 2 {
						item = &P_IA_skill{}
					} else if mret == 3 {
						item = &P_IA_changeCannon{}
					} else if mret == 4 {
						item = &P_IA_lockFish{}
					} else if mret == 50 {
						item = &P_IA_initWave{}
					} else if mret == 51 {
						item = &P_IA_changeSeat{}
					} else if mret == 52 {
						item = &P_IA_frozen{}
					} else if mret == 53 {
						item = &P_IA_insertGenFish{}
					} else if mret == 54 {
						item = &P_IA_clearScene{}
					} else if mret == 55 {
						item = &P_IA_fishSkill{}
					} else if mret == 56 {
						item = &P_IA_playerkillallfish{}
					} else if mret == 57 {
						item = &P_IA_subKilled{}
					} else if mret == 58 {
						item = &P_IA_crabCloseStatus{}
					} else if mret == 59 {
						item = &P_IA_crabDrop{}
					} else if mret == 60 {
						item = &P_IA_changeSurface{}
					} else {
						return -1
					}
				} else {
					return -1
				}
			}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_action = append(self.P_action, item)
		}
	}
	return ret
}

type P_C2S_InjectLockedAction struct {
	P_frameSegment  int32
	P_frameInject   int32
	P_seedGenwave   int32
	P_seedCatchfish int32
	P_inputs        []P_InputAction_Interface
}

func (self *P_C2S_InjectLockedAction) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_InjectLockedAction
}
func (self *P_C2S_InjectLockedAction) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackInt32(self.P_frameSegment)
	packer.PackInt32(self.P_frameInject)
	packer.PackInt32(self.P_seedGenwave)
	packer.PackInt32(self.P_seedCatchfish)
	packer.PackUInt32(uint32(len(self.P_inputs)))
	for i := 1; i < len(self.P_inputs); i++ {
		packer.PackUInt32(self.P_inputs[i].F_InputAction())
		self.P_inputs[i].Pack(packer, false)
	}
}

func (self *P_C2S_InjectLockedAction) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_frameSegment = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_frameInject = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_seedGenwave = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_seedCatchfish = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_inputs = make([]P_InputAction_Interface, 0, count)
		for i := 1; i < int(count); i++ {
			var item P_InputAction_Interface
			if ot, mret := unpacker.UnPackUInt32(); ot == 0 {
				if mret != P_InputAction_Maxtype {
					if mret == 0 {
						item = &P_IA_sync{}
					} else if mret == 1 {
						item = &P_IA_shoot{}
					} else if mret == 2 {
						item = &P_IA_skill{}
					} else if mret == 3 {
						item = &P_IA_changeCannon{}
					} else if mret == 4 {
						item = &P_IA_lockFish{}
					} else if mret == 50 {
						item = &P_IA_initWave{}
					} else if mret == 51 {
						item = &P_IA_changeSeat{}
					} else if mret == 52 {
						item = &P_IA_frozen{}
					} else if mret == 53 {
						item = &P_IA_insertGenFish{}
					} else if mret == 54 {
						item = &P_IA_clearScene{}
					} else if mret == 55 {
						item = &P_IA_fishSkill{}
					} else if mret == 56 {
						item = &P_IA_playerkillallfish{}
					} else if mret == 57 {
						item = &P_IA_subKilled{}
					} else if mret == 58 {
						item = &P_IA_crabCloseStatus{}
					} else if mret == 59 {
						item = &P_IA_crabDrop{}
					} else if mret == 60 {
						item = &P_IA_changeSurface{}
					} else {
						return -1
					}
				} else {
					return -1
				}
			}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_inputs = append(self.P_inputs, item)
		}
	}
	return ret
}

type P_S2C_LockFrameQuery struct {
	P_token  uint32
	P_action []P_InputAction_Interface
}

func (self *P_S2C_LockFrameQuery) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LockFrameQuery
}
func (self *P_S2C_LockFrameQuery) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_token)
	packer.PackUInt32(uint32(len(self.P_action)))
	for i := 1; i < len(self.P_action); i++ {
		packer.PackUInt32(self.P_action[i].F_InputAction())
		self.P_action[i].Pack(packer, false)
	}
}

func (self *P_S2C_LockFrameQuery) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_token = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_action = make([]P_InputAction_Interface, 0, count)
		for i := 1; i < int(count); i++ {
			var item P_InputAction_Interface
			if ot, mret := unpacker.UnPackUInt32(); ot == 0 {
				if mret != P_InputAction_Maxtype {
					if mret == 0 {
						item = &P_IA_sync{}
					} else if mret == 1 {
						item = &P_IA_shoot{}
					} else if mret == 2 {
						item = &P_IA_skill{}
					} else if mret == 3 {
						item = &P_IA_changeCannon{}
					} else if mret == 4 {
						item = &P_IA_lockFish{}
					} else if mret == 50 {
						item = &P_IA_initWave{}
					} else if mret == 51 {
						item = &P_IA_changeSeat{}
					} else if mret == 52 {
						item = &P_IA_frozen{}
					} else if mret == 53 {
						item = &P_IA_insertGenFish{}
					} else if mret == 54 {
						item = &P_IA_clearScene{}
					} else if mret == 55 {
						item = &P_IA_fishSkill{}
					} else if mret == 56 {
						item = &P_IA_playerkillallfish{}
					} else if mret == 57 {
						item = &P_IA_subKilled{}
					} else if mret == 58 {
						item = &P_IA_crabCloseStatus{}
					} else if mret == 59 {
						item = &P_IA_crabDrop{}
					} else if mret == 60 {
						item = &P_IA_changeSurface{}
					} else {
						return -1
					}
				} else {
					return -1
				}
			}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_action = append(self.P_action, item)
		}
	}
	return ret
}

type P_C2S_LockFrameAnswer struct {
	P_token       uint32
	P_lockedFrame uint32
}

func (self *P_C2S_LockFrameAnswer) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_LockFrameAnswer
}
func (self *P_C2S_LockFrameAnswer) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_token)
	packer.PackUInt32(self.P_lockedFrame)
}

func (self *P_C2S_LockFrameAnswer) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_token = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_lockedFrame = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_QuitRoom struct {
}

func (self *P_C2S_QuitRoom) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_QuitRoom
}
func (self *P_C2S_QuitRoom) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
}

func (self *P_C2S_QuitRoom) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	return ret
}

type P_S2C_ChangeScene struct {
	P_model   uint32
	P_sceneId uint32
}

func (self *P_S2C_ChangeScene) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_ChangeScene
}
func (self *P_S2C_ChangeScene) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_model)
	packer.PackUInt32(self.P_sceneId)
}

func (self *P_S2C_ChangeScene) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_model = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_sceneId = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_ChatMsg struct {
	P_type        uint32
	P_toplayer    uint64
	P_chatContent string
}

func (self *P_C2S_ChatMsg) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_ChatMsg
}
func (self *P_C2S_ChatMsg) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_type)
	packer.PackUInt64(self.P_toplayer)
	packer.PackString(self.P_chatContent)
}

func (self *P_C2S_ChatMsg) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_type = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_toplayer = unpacker.UnPackUInt64()
	if ret != 0 {
		return ret
	}
	ret, self.P_chatContent = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_ChatMsg struct {
	P_chat    *P_ChatData
	P_seatNum uint32
}

func (self *P_S2C_ChatMsg) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_ChatMsg
}
func (self *P_S2C_ChatMsg) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	self.P_chat.Pack(packer, false)
	packer.PackUInt32(self.P_seatNum)
}

func (self *P_S2C_ChatMsg) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	self.P_chat = &P_ChatData{}

	ret = self.P_chat.Unpack(unpacker)
	if ret != 0 {
		return ret
	}

	ret, self.P_seatNum = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_ChatErr struct {
	P_result uint32
	P_value  uint32
}

func (self *P_S2C_ChatErr) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_ChatErr
}
func (self *P_S2C_ChatErr) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_result)
	packer.PackUInt32(self.P_value)
}

func (self *P_S2C_ChatErr) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_result = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_value = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_VerityPhoneNum struct {
	P_verityNum string
	P_wechatAcc string
}

func (self *P_C2S_VerityPhoneNum) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_VerityPhoneNum
}
func (self *P_C2S_VerityPhoneNum) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_verityNum)
	packer.PackString(self.P_wechatAcc)
}

func (self *P_C2S_VerityPhoneNum) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_verityNum = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_wechatAcc = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_VerityPhoneNum struct {
	P_limitSecd uint32
}

func (self *P_S2C_VerityPhoneNum) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_VerityPhoneNum
}
func (self *P_S2C_VerityPhoneNum) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_limitSecd)
}

func (self *P_S2C_VerityPhoneNum) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_limitSecd = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_BindPhoneNum struct {
	P_phoneNum string
}

func (self *P_C2S_BindPhoneNum) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_BindPhoneNum
}
func (self *P_C2S_BindPhoneNum) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_phoneNum)
}

func (self *P_C2S_BindPhoneNum) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_phoneNum = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_SynPhoneNum struct {
	P_phoneNum string
}

func (self *P_S2C_SynPhoneNum) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SynPhoneNum
}
func (self *P_S2C_SynPhoneNum) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_phoneNum)
}

func (self *P_S2C_SynPhoneNum) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_phoneNum = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_SmApproveInfo struct {
	P_sm_name   string
	P_sm_phone  string
	P_sm_idcard string
}

func (self *P_C2S_SmApproveInfo) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_SmApproveInfo
}
func (self *P_C2S_SmApproveInfo) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_sm_name)
	packer.PackString(self.P_sm_phone)
	packer.PackString(self.P_sm_idcard)
}

func (self *P_C2S_SmApproveInfo) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_sm_name = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_sm_phone = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_sm_idcard = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_SmApproveInfo struct {
	P_sm_name   string
	P_sm_phone  string
	P_sm_idcard string
}

func (self *P_S2C_SmApproveInfo) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SmApproveInfo
}
func (self *P_S2C_SmApproveInfo) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackString(self.P_sm_name)
	packer.PackString(self.P_sm_phone)
	packer.PackString(self.P_sm_idcard)
}

func (self *P_S2C_SmApproveInfo) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_sm_name = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_sm_phone = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	ret, self.P_sm_idcard = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_ShootAction struct {
	P_elapse uint32
	P_action uint32
	P_pvalue uint32
	P_flags  uint32
}

func (self *P_C2S_ShootAction) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_ShootAction
}
func (self *P_C2S_ShootAction) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_elapse)
	packer.PackUInt32(self.P_action)
	packer.PackUInt32(self.P_pvalue)
	packer.PackUInt32(self.P_flags)
}

func (self *P_C2S_ShootAction) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_elapse = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_action = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_pvalue = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_flags = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_ShootAction struct {
	P_elapse uint32
	P_action uint32
	P_pvalue uint32
	P_flags  uint32
	P_seat   uint32
}

func (self *P_S2C_ShootAction) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_ShootAction
}
func (self *P_S2C_ShootAction) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_elapse)
	packer.PackUInt32(self.P_action)
	packer.PackUInt32(self.P_pvalue)
	packer.PackUInt32(self.P_flags)
	packer.PackUInt32(self.P_seat)
}

func (self *P_S2C_ShootAction) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_elapse = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_action = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_pvalue = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_flags = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_seat = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_SyncGenWaveState struct {
	P_curFrame           int32
	P_ss                 *P_SceneState
	P_inputs             []P_InputAction_Interface
	P_skillFrameRemaning []int32
	P_skillStartWays     []int32
	P_validFishes        []int32
}

func (self *P_S2C_SyncGenWaveState) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SyncGenWaveState
}
func (self *P_S2C_SyncGenWaveState) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackInt32(self.P_curFrame)
	self.P_ss.Pack(packer, false)
	packer.PackUInt32(uint32(len(self.P_inputs)))
	for i := 1; i < len(self.P_inputs); i++ {
		packer.PackUInt32(self.P_inputs[i].F_InputAction())
		self.P_inputs[i].Pack(packer, false)
	}
	packer.PackUInt32(uint32(len(self.P_skillFrameRemaning)))
	for i := 1; i < len(self.P_skillFrameRemaning); i++ {
		packer.PackInt32(self.P_skillFrameRemaning[i])
	}
	packer.PackUInt32(uint32(len(self.P_skillStartWays)))
	for i := 1; i < len(self.P_skillStartWays); i++ {
		packer.PackInt32(self.P_skillStartWays[i])
	}
	packer.PackUInt32(uint32(len(self.P_validFishes)))
	for i := 1; i < len(self.P_validFishes); i++ {
		packer.PackInt32(self.P_validFishes[i])
	}
}

func (self *P_S2C_SyncGenWaveState) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_curFrame = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	self.P_ss = &P_SceneState{}

	ret = self.P_ss.Unpack(unpacker)
	if ret != 0 {
		return ret
	}

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_inputs = make([]P_InputAction_Interface, 0, count)
		for i := 1; i < int(count); i++ {
			var item P_InputAction_Interface
			if ot, mret := unpacker.UnPackUInt32(); ot == 0 {
				if mret != P_InputAction_Maxtype {
					if mret == 0 {
						item = &P_IA_sync{}
					} else if mret == 1 {
						item = &P_IA_shoot{}
					} else if mret == 2 {
						item = &P_IA_skill{}
					} else if mret == 3 {
						item = &P_IA_changeCannon{}
					} else if mret == 4 {
						item = &P_IA_lockFish{}
					} else if mret == 50 {
						item = &P_IA_initWave{}
					} else if mret == 51 {
						item = &P_IA_changeSeat{}
					} else if mret == 52 {
						item = &P_IA_frozen{}
					} else if mret == 53 {
						item = &P_IA_insertGenFish{}
					} else if mret == 54 {
						item = &P_IA_clearScene{}
					} else if mret == 55 {
						item = &P_IA_fishSkill{}
					} else if mret == 56 {
						item = &P_IA_playerkillallfish{}
					} else if mret == 57 {
						item = &P_IA_subKilled{}
					} else if mret == 58 {
						item = &P_IA_crabCloseStatus{}
					} else if mret == 59 {
						item = &P_IA_crabDrop{}
					} else if mret == 60 {
						item = &P_IA_changeSurface{}
					} else {
						return -1
					}
				} else {
					return -1
				}
			}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_inputs = append(self.P_inputs, item)
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_skillFrameRemaning = make([]int32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_skillFrameRemaning[i] = unpacker.UnPackInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_skillStartWays = make([]int32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_skillStartWays[i] = unpacker.UnPackInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_validFishes = make([]int32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_validFishes[i] = unpacker.UnPackInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	return ret
}

type P_S2C_SyncFullData struct {
	P_frame   int32
	P_cud     []*P_CacheUpdateData
	P_ccd     []*P_CachedConstData
	P_players []*P_SyncFullPlayerData
}

func (self *P_S2C_SyncFullData) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SyncFullData
}
func (self *P_S2C_SyncFullData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackInt32(self.P_frame)
	packer.PackUInt32(uint32(len(self.P_cud)))
	for i := 1; i < len(self.P_cud); i++ {
		self.P_cud[i].Pack(packer, false)
	}
	packer.PackUInt32(uint32(len(self.P_ccd)))
	for i := 1; i < len(self.P_ccd); i++ {
		self.P_ccd[i].Pack(packer, false)
	}
	packer.PackUInt32(uint32(len(self.P_players)))
	for i := 1; i < len(self.P_players); i++ {
		self.P_players[i].Pack(packer, false)
	}
}

func (self *P_S2C_SyncFullData) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_frame = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_cud = make([]*P_CacheUpdateData, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_CacheUpdateData{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_cud = append(self.P_cud, item)
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_ccd = make([]*P_CachedConstData, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_CachedConstData{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_ccd = append(self.P_ccd, item)
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_players = make([]*P_SyncFullPlayerData, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_SyncFullPlayerData{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_players = append(self.P_players, item)
		}
	}
	return ret
}

type P_C2S_SyncInputAction struct {
	P_frame         int32
	P_seedGenwave   int32
	P_seedCatchfish int32
	P_inputs        []P_InputAction_Interface
}

func (self *P_C2S_SyncInputAction) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_SyncInputAction
}
func (self *P_C2S_SyncInputAction) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackInt32(self.P_frame)
	packer.PackInt32(self.P_seedGenwave)
	packer.PackInt32(self.P_seedCatchfish)
	packer.PackUInt32(uint32(len(self.P_inputs)))
	for i := 1; i < len(self.P_inputs); i++ {
		packer.PackUInt32(self.P_inputs[i].F_InputAction())
		self.P_inputs[i].Pack(packer, false)
	}
}

func (self *P_C2S_SyncInputAction) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_frame = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_seedGenwave = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_seedCatchfish = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_inputs = make([]P_InputAction_Interface, 0, count)
		for i := 1; i < int(count); i++ {
			var item P_InputAction_Interface
			if ot, mret := unpacker.UnPackUInt32(); ot == 0 {
				if mret != P_InputAction_Maxtype {
					if mret == 0 {
						item = &P_IA_sync{}
					} else if mret == 1 {
						item = &P_IA_shoot{}
					} else if mret == 2 {
						item = &P_IA_skill{}
					} else if mret == 3 {
						item = &P_IA_changeCannon{}
					} else if mret == 4 {
						item = &P_IA_lockFish{}
					} else if mret == 50 {
						item = &P_IA_initWave{}
					} else if mret == 51 {
						item = &P_IA_changeSeat{}
					} else if mret == 52 {
						item = &P_IA_frozen{}
					} else if mret == 53 {
						item = &P_IA_insertGenFish{}
					} else if mret == 54 {
						item = &P_IA_clearScene{}
					} else if mret == 55 {
						item = &P_IA_fishSkill{}
					} else if mret == 56 {
						item = &P_IA_playerkillallfish{}
					} else if mret == 57 {
						item = &P_IA_subKilled{}
					} else if mret == 58 {
						item = &P_IA_crabCloseStatus{}
					} else if mret == 59 {
						item = &P_IA_crabDrop{}
					} else if mret == 60 {
						item = &P_IA_changeSurface{}
					} else {
						return -1
					}
				} else {
					return -1
				}
			}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_inputs = append(self.P_inputs, item)
		}
	}
	return ret
}

type P_S2C_RequireDebugData struct {
	P_frame uint32
}

func (self *P_S2C_RequireDebugData) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_RequireDebugData
}
func (self *P_S2C_RequireDebugData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_frame)
}

func (self *P_S2C_RequireDebugData) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_frame = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_RequireDebugData struct {
	P_frame     uint32
	P_debugData string
}

func (self *P_C2S_RequireDebugData) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_RequireDebugData
}
func (self *P_C2S_RequireDebugData) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_frame)
	packer.PackString(self.P_debugData)
}

func (self *P_C2S_RequireDebugData) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_frame = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_debugData = unpacker.UnPackString()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_LittleGamePreNotice struct {
	P_gameid uint32
	P_second uint32
}

func (self *P_S2C_LittleGamePreNotice) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_LittleGamePreNotice
}
func (self *P_S2C_LittleGamePreNotice) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_gameid)
	packer.PackUInt32(self.P_second)
}

func (self *P_S2C_LittleGamePreNotice) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_gameid = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_second = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_C2S_UseSkill struct {
	P_skillid uint32
}

func (self *P_C2S_UseSkill) GetProId() uint32 {
	return P_COM_GAME_WORLD_C2S_UseSkill
}
func (self *P_C2S_UseSkill) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_skillid)
}

func (self *P_C2S_UseSkill) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_skillid = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}

type P_S2C_ShowGetItem struct {
	P_way     int32
	P_itemId  []int32
	P_itemCnt []uint32
}

func (self *P_S2C_ShowGetItem) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_ShowGetItem
}
func (self *P_S2C_ShowGetItem) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackInt32(self.P_way)
	packer.PackUInt32(uint32(len(self.P_itemId)))
	for i := 1; i < len(self.P_itemId); i++ {
		packer.PackInt32(self.P_itemId[i])
	}
	packer.PackUInt32(uint32(len(self.P_itemCnt)))
	for i := 1; i < len(self.P_itemCnt); i++ {
		packer.PackUInt32(self.P_itemCnt[i])
	}
}

func (self *P_S2C_ShowGetItem) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_way = unpacker.UnPackInt32()
	if ret != 0 {
		return ret
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_itemId = make([]int32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_itemId[i] = unpacker.UnPackInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_itemCnt = make([]uint32, count)
		for i := 1; i < int(count); i++ {
			ret, self.P_itemCnt[i] = unpacker.UnPackUInt32()
			if ret != 0 {
				return ret
			}
		}
	}
	return ret
}

type P_S2C_SynPlayerValue struct {
	P_values []*P_PlayerValue
}

func (self *P_S2C_SynPlayerValue) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_SynPlayerValue
}
func (self *P_S2C_SynPlayerValue) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(uint32(len(self.P_values)))
	for i := 1; i < len(self.P_values); i++ {
		self.P_values[i].Pack(packer, false)
	}
}

func (self *P_S2C_SynPlayerValue) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	if ot, count := unpacker.UnPackUInt32(); ot == 0 {
		self.P_values = make([]*P_PlayerValue, 0, count)
		for i := 1; i < int(count); i++ {
			var item = &P_PlayerValue{}
			ret = item.Unpack(unpacker)
			if ret != 0 {
				return -1
			}
			self.P_values = append(self.P_values, item)
		}
	}
	return ret
}

type P_S2C_RedPointFlag struct {
	P_flag uint32
	P_num  uint32
}

func (self *P_S2C_RedPointFlag) GetProId() uint32 {
	return P_COM_GAME_WORLD_S2C_RedPointFlag
}
func (self *P_S2C_RedPointFlag) Pack(packer protocolbase.IPacker, clear bool) {
	if clear {
		packer.ClearBuffer()
	}
	packer.PackUInt32(self.GetProId())
	packer.PackUInt32(self.P_flag)
	packer.PackUInt32(self.P_num)
}

func (self *P_S2C_RedPointFlag) Unpack(unpacker protocolbase.IUnpacker) int {
	var ret int = 0

	ret, self.P_flag = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	ret, self.P_num = unpacker.UnPackUInt32()
	if ret != 0 {
		return ret
	}
	return ret
}
